                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module application
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _display_update_stepper_enable
                                     12 	.globl _display_update_stepper_dir
                                     13 	.globl _display_encoder_control_page_first_time
                                     14 	.globl _display_distance_control_page_first_time
                                     15 	.globl _display_step_control_set_frequency_option
                                     16 	.globl _display_step_control_set_microstepping_option
                                     17 	.globl _display_step_control_set_steps_option
                                     18 	.globl _display_step_control_page
                                     19 	.globl _display_step_control_page_first_time
                                     20 	.globl _display_menu_page
                                     21 	.globl _stepper_set_steps_from_float_digits
                                     22 	.globl _stepper_set_dir
                                     23 	.globl _stepper_set_enable
                                     24 	.globl _get_stepper_state
                                     25 	.globl _stepper_motor_move
                                     26 	.globl _encoder_count_set
                                     27 	.globl _encoder_count_reset
                                     28 	.globl _printf
                                     29 	.globl _S1SM0_FE
                                     30 	.globl _T1IE
                                     31 	.globl _T0IE
                                     32 	.globl _T1RUN
                                     33 	.globl _T0RUN
                                     34 	.globl _CY
                                     35 	.globl _AC
                                     36 	.globl _F0
                                     37 	.globl _RS1
                                     38 	.globl _RS0
                                     39 	.globl _OV
                                     40 	.globl _F1
                                     41 	.globl _P
                                     42 	.globl _EA
                                     43 	.globl _INT1IE
                                     44 	.globl _INT0IE
                                     45 	.globl _INT1TR
                                     46 	.globl _INT0TR
                                     47 	.globl _P5_5
                                     48 	.globl _P5_4
                                     49 	.globl _P5_3
                                     50 	.globl _P5_2
                                     51 	.globl _P5_1
                                     52 	.globl _P5_0
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _USBADR
                                     78 	.globl _USBCON
                                     79 	.globl _USBDAT
                                     80 	.globl _USBCLK
                                     81 	.globl _S4BUF
                                     82 	.globl _S4CON
                                     83 	.globl _S3BUF
                                     84 	.globl _S3CON
                                     85 	.globl _S2BUF
                                     86 	.globl _S2CON
                                     87 	.globl _S1BUF
                                     88 	.globl _S1CON
                                     89 	.globl _SADEN
                                     90 	.globl _SADDR
                                     91 	.globl _AUXINTIF
                                     92 	.globl _T3
                                     93 	.globl _T3L
                                     94 	.globl _T3H
                                     95 	.globl _T4
                                     96 	.globl _T4L
                                     97 	.globl _T4H
                                     98 	.globl _T4T3M
                                     99 	.globl _WDT_CONTR
                                    100 	.globl _AUXR
                                    101 	.globl _T2
                                    102 	.globl _T2H
                                    103 	.globl _T2L
                                    104 	.globl _T1
                                    105 	.globl _T1H
                                    106 	.globl _T1L
                                    107 	.globl _T0
                                    108 	.globl _T0H
                                    109 	.globl _T0L
                                    110 	.globl _TMOD
                                    111 	.globl _TCON
                                    112 	.globl _IRTRIM
                                    113 	.globl _LIRTRIM
                                    114 	.globl _IRCBAND
                                    115 	.globl _SPDAT
                                    116 	.globl _SPCTL
                                    117 	.globl _SPSTAT
                                    118 	.globl _WKTC
                                    119 	.globl _WKTCH
                                    120 	.globl _WKTCL
                                    121 	.globl _BUS_SPEED
                                    122 	.globl _P_SW2
                                    123 	.globl _P_SW1
                                    124 	.globl _RSTCFG
                                    125 	.globl _PCON
                                    126 	.globl _B
                                    127 	.globl _ACC
                                    128 	.globl _PSW
                                    129 	.globl _SP
                                    130 	.globl _IP3H
                                    131 	.globl _IP3L
                                    132 	.globl _IP2H
                                    133 	.globl _IP2L
                                    134 	.globl _IE2
                                    135 	.globl _IP1H
                                    136 	.globl _IP1L
                                    137 	.globl _IE1
                                    138 	.globl _INT_CLKO
                                    139 	.globl _IAP_TPS
                                    140 	.globl _IAP_CONTR
                                    141 	.globl _IAP_TRIG
                                    142 	.globl _IAP_CMD
                                    143 	.globl _IAP_ADDR
                                    144 	.globl _IAP_ADDRL
                                    145 	.globl _IAP_ADDRH
                                    146 	.globl _IAP_DATA
                                    147 	.globl _P5M0
                                    148 	.globl _P5M1
                                    149 	.globl _P5
                                    150 	.globl _P3M0
                                    151 	.globl _P3M1
                                    152 	.globl _P3
                                    153 	.globl _P2M0
                                    154 	.globl _P2M1
                                    155 	.globl _P2
                                    156 	.globl _P1M0
                                    157 	.globl _P1M1
                                    158 	.globl _P1
                                    159 	.globl _TA
                                    160 	.globl _DPH1
                                    161 	.globl _DPL1
                                    162 	.globl _DPS
                                    163 	.globl _DP
                                    164 	.globl _DPH
                                    165 	.globl _DPL
                                    166 	.globl _CMPCR2
                                    167 	.globl _CMPCR1
                                    168 	.globl _DMA_ADC_AMT
                                    169 	.globl _ADCCFG
                                    170 	.globl _ADC_RES
                                    171 	.globl _ADC_RESL
                                    172 	.globl _ADC_RESH
                                    173 	.globl _ADC_CONTR
                                    174 	.globl _stepper_movement
                                    175 	.globl _inputs
                                    176 	.globl _float_digits
                                    177 	.globl _float_digit_pointer
                                    178 	.globl _application_process_func
                                    179 	.globl _current_page
                                    180 	.globl _DMA_UR4R_TXAL
                                    181 	.globl _DMA_UR4R_TXAH
                                    182 	.globl _DMA_UR4R_DONE
                                    183 	.globl _DMA_UR4R_AMT
                                    184 	.globl _DMA_UR4R_STA
                                    185 	.globl _DMA_UR4R_CR
                                    186 	.globl _DMA_UR4R_CFG
                                    187 	.globl _DMA_UR4T_TXAL
                                    188 	.globl _DMA_UR4T_TXAH
                                    189 	.globl _DMA_UR4T_DONE
                                    190 	.globl _DMA_UR4T_AMT
                                    191 	.globl _DMA_UR4T_STA
                                    192 	.globl _DMA_UR4T_CR
                                    193 	.globl _DMA_UR4T_CFG
                                    194 	.globl _DMA_UR3R_TXAL
                                    195 	.globl _DMA_UR3R_TXAH
                                    196 	.globl _DMA_UR3R_DONE
                                    197 	.globl _DMA_UR3R_AMT
                                    198 	.globl _DMA_UR3R_STA
                                    199 	.globl _DMA_UR3R_CR
                                    200 	.globl _DMA_UR3R_CFG
                                    201 	.globl _DMA_UR3T_TXAL
                                    202 	.globl _DMA_UR3T_TXAH
                                    203 	.globl _DMA_UR3T_DONE
                                    204 	.globl _DMA_UR3T_AMT
                                    205 	.globl _DMA_UR3T_STA
                                    206 	.globl _DMA_UR3T_CR
                                    207 	.globl _DMA_UR3T_CFG
                                    208 	.globl _DMA_UR2R_TXAL
                                    209 	.globl _DMA_UR2R_TXAH
                                    210 	.globl _DMA_UR2R_DONE
                                    211 	.globl _DMA_UR2R_AMT
                                    212 	.globl _DMA_UR2R_STA
                                    213 	.globl _DMA_UR2R_CR
                                    214 	.globl _DMA_UR2R_CFG
                                    215 	.globl _DMA_UR2T_TXAL
                                    216 	.globl _DMA_UR2T_TXAH
                                    217 	.globl _DMA_UR2T_DONE
                                    218 	.globl _DMA_UR2T_AMT
                                    219 	.globl _DMA_UR2T_STA
                                    220 	.globl _DMA_UR2T_CR
                                    221 	.globl _DMA_UR2T_CFG
                                    222 	.globl _DMA_UR1R_TXAL
                                    223 	.globl _DMA_UR1R_TXAH
                                    224 	.globl _DMA_UR1R_DONE
                                    225 	.globl _DMA_UR1R_AMT
                                    226 	.globl _DMA_UR1R_STA
                                    227 	.globl _DMA_UR1R_CR
                                    228 	.globl _DMA_UR1R_CFG
                                    229 	.globl _DMA_UR1T_TXAL
                                    230 	.globl _DMA_UR1T_TXAH
                                    231 	.globl _DMA_UR1T_DONE
                                    232 	.globl _DMA_URTX_AMT
                                    233 	.globl _DMA_UR1T_STA
                                    234 	.globl _DMA_UR1T_CR
                                    235 	.globl _DMA_UR1T_CFG
                                    236 	.globl _TM4PS
                                    237 	.globl _TM3PS
                                    238 	.globl _TM2PS
                                    239 	.globl _IRC48MCR
                                    240 	.globl _IRCDB
                                    241 	.globl _MCLKOCR
                                    242 	.globl _CKSEL
                                    243 	.globl _IRC32KCR
                                    244 	.globl _XOSCCR
                                    245 	.globl _HIRCCR
                                    246 	.globl _CLKDIV
                                    247 	.globl _DMA_SPI_CFG2
                                    248 	.globl _DMA_SPI_RXAL
                                    249 	.globl _DMA_SPI_RXAH
                                    250 	.globl _DMA_SPI_TXAL
                                    251 	.globl _DMA_SPI_TXAH
                                    252 	.globl _DMA_SPI_DONE
                                    253 	.globl _DMA_SPI_AMT
                                    254 	.globl _DMA_SPI_STA
                                    255 	.globl _DMA_SPI_CR
                                    256 	.globl _DMA_SPI_CFG
                                    257 	.globl _SSEC
                                    258 	.globl _SEC
                                    259 	.globl _MIN
                                    260 	.globl _HOUR
                                    261 	.globl _DAY
                                    262 	.globl _MONTH
                                    263 	.globl _YEAR
                                    264 	.globl _INISSEC
                                    265 	.globl _INISEC
                                    266 	.globl _INIMIN
                                    267 	.globl _INIHOUR
                                    268 	.globl _INIDAY
                                    269 	.globl _INIMONTH
                                    270 	.globl _INIYEAR
                                    271 	.globl _ALASSEC
                                    272 	.globl _ALASEC
                                    273 	.globl _ALAMIN
                                    274 	.globl _ALAHOUR
                                    275 	.globl _RTCIF
                                    276 	.globl _RTCIEN
                                    277 	.globl _RTCCFG
                                    278 	.globl _RTCCR
                                    279 	.globl _PWMB_OISR
                                    280 	.globl _PWMB_DTR
                                    281 	.globl _PWMB_BKR
                                    282 	.globl _PWMB_CCR4L
                                    283 	.globl _PWMB_CCR4H
                                    284 	.globl _PWMB_CCR3L
                                    285 	.globl _PWMB_CCR3H
                                    286 	.globl _PWMB_CCR2L
                                    287 	.globl _PWMB_CCR2H
                                    288 	.globl _PWMB_CCR1L
                                    289 	.globl _PWMB_CCR1H
                                    290 	.globl _PWMB_RCR
                                    291 	.globl _PWMB_ARRL
                                    292 	.globl _PWMB_ARRH
                                    293 	.globl _PWMB_PSCRL
                                    294 	.globl _PWMB_PSCRH
                                    295 	.globl _PWMB_CNTRL
                                    296 	.globl _PWMB_CNTRH
                                    297 	.globl _PWMB_CCER2
                                    298 	.globl _PWMB_CCER1
                                    299 	.globl _PWMB_CCMR4
                                    300 	.globl _PWMB_CCMR3
                                    301 	.globl _PWMB_CCMR2
                                    302 	.globl _PWMB_CCMR1
                                    303 	.globl _PWMB_EGR
                                    304 	.globl _PWMB_SR2
                                    305 	.globl _PWMB_SR1
                                    306 	.globl _PWMB_IER
                                    307 	.globl _PWMB_ETR
                                    308 	.globl _PWMB_SMCR
                                    309 	.globl _PWMB_CR2
                                    310 	.globl _PWMB_CR1
                                    311 	.globl _PWMA_OISR
                                    312 	.globl _PWMA_DTR
                                    313 	.globl _PWMA_BKR
                                    314 	.globl _PWMA_CCR4L
                                    315 	.globl _PWMA_CCR4H
                                    316 	.globl _PWMA_CCR3L
                                    317 	.globl _PWMA_CCR3H
                                    318 	.globl _PWMA_CCR2L
                                    319 	.globl _PWMA_CCR2H
                                    320 	.globl _PWMA_CCR1L
                                    321 	.globl _PWMA_CCR1H
                                    322 	.globl _PWMA_RCR
                                    323 	.globl _PWMA_ARRL
                                    324 	.globl _PWMA_ARRH
                                    325 	.globl _PWMA_PSCRL
                                    326 	.globl _PWMA_PSCRH
                                    327 	.globl _PWMA_CNTRL
                                    328 	.globl _PWMA_CNTRH
                                    329 	.globl _PWMA_CCER2
                                    330 	.globl _PWMA_CCER1
                                    331 	.globl _PWMA_CCMR4
                                    332 	.globl _PWMA_CCMR3
                                    333 	.globl _PWMA_CCMR2
                                    334 	.globl _PWMA_CCMR1
                                    335 	.globl _PWMA_EGR
                                    336 	.globl _PWMA_SR2
                                    337 	.globl _PWMA_SR1
                                    338 	.globl _PWMA_IER
                                    339 	.globl _PWMA_ETR
                                    340 	.globl _PWMA_SMCR
                                    341 	.globl _PWMA_CR2
                                    342 	.globl _PWMA_CR1
                                    343 	.globl _PWMB_IOAUX
                                    344 	.globl _PWMB_PS
                                    345 	.globl _PWMB_ENO
                                    346 	.globl _PWMB_ETRPS
                                    347 	.globl _PWMA_IOAUX
                                    348 	.globl _PWMA_PS
                                    349 	.globl _PWMA_ENO
                                    350 	.globl _PWMA_ETRPS
                                    351 	.globl _RSTFLAG
                                    352 	.globl _SPFUNC
                                    353 	.globl _OPCON
                                    354 	.globl _ARCON
                                    355 	.globl _MD4
                                    356 	.globl _MD5
                                    357 	.globl _MD0
                                    358 	.globl _MD1
                                    359 	.globl _MD2
                                    360 	.globl _MD3
                                    361 	.globl _DMA_LCM_RXAL
                                    362 	.globl _DMA_LCM_RXAH
                                    363 	.globl _DMA_LCM_TXAL
                                    364 	.globl _DMA_LCM_TXAH
                                    365 	.globl _DMA_LCM_DONE
                                    366 	.globl _DMA_LCM_AMT
                                    367 	.globl _DMA_LCM_STA
                                    368 	.globl _DMA_LCM_CR
                                    369 	.globl _DMA_LCM_CFG
                                    370 	.globl _LCMIDDAT
                                    371 	.globl _LCMIDDATH
                                    372 	.globl _LCMIDDATL
                                    373 	.globl _LCMSTA
                                    374 	.globl _LCMCR
                                    375 	.globl _LCMCFG2
                                    376 	.globl _LCMCFG
                                    377 	.globl _I2CMSAUX
                                    378 	.globl _I2CRXD
                                    379 	.globl _I2CTXD
                                    380 	.globl _I2CSLADR
                                    381 	.globl _I2CSLST
                                    382 	.globl _I2CSLCR
                                    383 	.globl _I2CMSST
                                    384 	.globl _I2CMSCR
                                    385 	.globl _I2CCFG
                                    386 	.globl _PINIPH
                                    387 	.globl _PINIPL
                                    388 	.globl _P5IE
                                    389 	.globl _P5DR
                                    390 	.globl _P5SR
                                    391 	.globl _P5NCS
                                    392 	.globl _P5PU
                                    393 	.globl _P5WKUE
                                    394 	.globl _P5IM1
                                    395 	.globl _P5IM0
                                    396 	.globl _P5INTF
                                    397 	.globl _P5INTE
                                    398 	.globl _P3IE
                                    399 	.globl _P3DR
                                    400 	.globl _P3SR
                                    401 	.globl _P3NCS
                                    402 	.globl _P3PU
                                    403 	.globl _P3WKUE
                                    404 	.globl _P3IM1
                                    405 	.globl _P3IM0
                                    406 	.globl _P3INTF
                                    407 	.globl _P3INTE
                                    408 	.globl _P2IE
                                    409 	.globl _P2DR
                                    410 	.globl _P2SR
                                    411 	.globl _P2NCS
                                    412 	.globl _P2PU
                                    413 	.globl _P2WKUE
                                    414 	.globl _P2IM1
                                    415 	.globl _P2IM0
                                    416 	.globl _P2INTF
                                    417 	.globl _P2INTE
                                    418 	.globl _P1IE
                                    419 	.globl _P1DR
                                    420 	.globl _P1SR
                                    421 	.globl _P1NCS
                                    422 	.globl _P1PU
                                    423 	.globl _P1WKUE
                                    424 	.globl _P1IM1
                                    425 	.globl _P1IM0
                                    426 	.globl _P1INTF
                                    427 	.globl _P1INTE
                                    428 	.globl _DMA_M2M_RXAL
                                    429 	.globl _DMA_M2M_RXAH
                                    430 	.globl _DMA_M2M_TXAL
                                    431 	.globl _DMA_M2M_TXAH
                                    432 	.globl _DMA_M2M_DONE
                                    433 	.globl _DMA_M2M_AMT
                                    434 	.globl _DMA_M2M_STA
                                    435 	.globl _DMA_M2M_CR
                                    436 	.globl _DMA_M2M_CFG
                                    437 	.globl _CMPEXCFG
                                    438 	.globl _DMA_ADC_CHSW1
                                    439 	.globl _DMA_ADC_CHSW0
                                    440 	.globl _DMA_ADC_CFG2
                                    441 	.globl _DMA_ADC_RXAL
                                    442 	.globl _DMA_ADC_RXAH
                                    443 	.globl _DMA_ADC_STA
                                    444 	.globl _DMA_ADC_CR
                                    445 	.globl _DMA_ADC_CFG
                                    446 	.globl _ADCEXCFG
                                    447 	.globl _ADCTIM
                                    448 	.globl _application_process_welcome_page
                                    449 	.globl _application_process_menu_page
                                    450 	.globl _application_process_step_control_page
                                    451 	.globl _application_process_step_control_set_frequency
                                    452 	.globl _application_process_step_control_set_microstepping
                                    453 	.globl _application_process_step_control_set_steps
                                    454 	.globl _application_process_distance_control_page
                                    455 	.globl _application_process_encoder_control_page
                                    456 	.globl _application_process_current_page
                                    457 ;--------------------------------------------------------
                                    458 ; special function registers
                                    459 ;--------------------------------------------------------
                                    460 	.area RSEG    (ABS,DATA)
      000000                        461 	.org 0x0000
                           0000BC   462 _ADC_CONTR	=	0x00bc
                           0000BD   463 _ADC_RESH	=	0x00bd
                           0000BE   464 _ADC_RESL	=	0x00be
                           00BDBE   465 _ADC_RES	=	0xbdbe
                           0000DE   466 _ADCCFG	=	0x00de
                           0000FA   467 _DMA_ADC_AMT	=	0x00fa
                           0000E6   468 _CMPCR1	=	0x00e6
                           0000E7   469 _CMPCR2	=	0x00e7
                           000082   470 _DPL	=	0x0082
                           000083   471 _DPH	=	0x0083
                           008382   472 _DP	=	0x8382
                           0000E3   473 _DPS	=	0x00e3
                           0000E4   474 _DPL1	=	0x00e4
                           0000E5   475 _DPH1	=	0x00e5
                           0000AE   476 _TA	=	0x00ae
                           000090   477 _P1	=	0x0090
                           000091   478 _P1M1	=	0x0091
                           000092   479 _P1M0	=	0x0092
                           0000A0   480 _P2	=	0x00a0
                           000095   481 _P2M1	=	0x0095
                           000096   482 _P2M0	=	0x0096
                           0000B0   483 _P3	=	0x00b0
                           0000B1   484 _P3M1	=	0x00b1
                           0000B2   485 _P3M0	=	0x00b2
                           0000C8   486 _P5	=	0x00c8
                           0000C9   487 _P5M1	=	0x00c9
                           0000CA   488 _P5M0	=	0x00ca
                           0000C2   489 _IAP_DATA	=	0x00c2
                           0000C3   490 _IAP_ADDRH	=	0x00c3
                           0000C4   491 _IAP_ADDRL	=	0x00c4
                           00C3C4   492 _IAP_ADDR	=	0xc3c4
                           0000C5   493 _IAP_CMD	=	0x00c5
                           0000C6   494 _IAP_TRIG	=	0x00c6
                           0000C7   495 _IAP_CONTR	=	0x00c7
                           0000F5   496 _IAP_TPS	=	0x00f5
                           00008F   497 _INT_CLKO	=	0x008f
                           0000A8   498 _IE1	=	0x00a8
                           0000B8   499 _IP1L	=	0x00b8
                           0000B7   500 _IP1H	=	0x00b7
                           0000AF   501 _IE2	=	0x00af
                           0000B5   502 _IP2L	=	0x00b5
                           0000B6   503 _IP2H	=	0x00b6
                           0000DF   504 _IP3L	=	0x00df
                           0000EE   505 _IP3H	=	0x00ee
                           000081   506 _SP	=	0x0081
                           0000D0   507 _PSW	=	0x00d0
                           0000E0   508 _ACC	=	0x00e0
                           0000F0   509 _B	=	0x00f0
                           000087   510 _PCON	=	0x0087
                           0000FF   511 _RSTCFG	=	0x00ff
                           0000A2   512 _P_SW1	=	0x00a2
                           0000BA   513 _P_SW2	=	0x00ba
                           0000A1   514 _BUS_SPEED	=	0x00a1
                           0000AA   515 _WKTCL	=	0x00aa
                           0000AB   516 _WKTCH	=	0x00ab
                           00ABAA   517 _WKTC	=	0xabaa
                           0000CD   518 _SPSTAT	=	0x00cd
                           0000CE   519 _SPCTL	=	0x00ce
                           0000CF   520 _SPDAT	=	0x00cf
                           00009D   521 _IRCBAND	=	0x009d
                           00009E   522 _LIRTRIM	=	0x009e
                           00009F   523 _IRTRIM	=	0x009f
                           000088   524 _TCON	=	0x0088
                           000089   525 _TMOD	=	0x0089
                           00008A   526 _T0L	=	0x008a
                           00008C   527 _T0H	=	0x008c
                           008C8A   528 _T0	=	0x8c8a
                           00008B   529 _T1L	=	0x008b
                           00008D   530 _T1H	=	0x008d
                           008D8B   531 _T1	=	0x8d8b
                           0000D7   532 _T2L	=	0x00d7
                           0000D6   533 _T2H	=	0x00d6
                           00D6D7   534 _T2	=	0xd6d7
                           00008E   535 _AUXR	=	0x008e
                           0000C1   536 _WDT_CONTR	=	0x00c1
                           0000D1   537 _T4T3M	=	0x00d1
                           0000D2   538 _T4H	=	0x00d2
                           0000D3   539 _T4L	=	0x00d3
                           00D2D3   540 _T4	=	0xd2d3
                           0000D4   541 _T3H	=	0x00d4
                           0000D5   542 _T3L	=	0x00d5
                           00D4D5   543 _T3	=	0xd4d5
                           0000EF   544 _AUXINTIF	=	0x00ef
                           0000A9   545 _SADDR	=	0x00a9
                           0000B9   546 _SADEN	=	0x00b9
                           000098   547 _S1CON	=	0x0098
                           000099   548 _S1BUF	=	0x0099
                           00009A   549 _S2CON	=	0x009a
                           00009B   550 _S2BUF	=	0x009b
                           0000AC   551 _S3CON	=	0x00ac
                           0000AD   552 _S3BUF	=	0x00ad
                           000084   553 _S4CON	=	0x0084
                           000085   554 _S4BUF	=	0x0085
                           0000DC   555 _USBCLK	=	0x00dc
                           0000EC   556 _USBDAT	=	0x00ec
                           0000F4   557 _USBCON	=	0x00f4
                           0000FC   558 _USBADR	=	0x00fc
                                    559 ;--------------------------------------------------------
                                    560 ; special function bits
                                    561 ;--------------------------------------------------------
                                    562 	.area RSEG    (ABS,DATA)
      000000                        563 	.org 0x0000
                           000090   564 _P1_0	=	0x0090
                           000091   565 _P1_1	=	0x0091
                           000092   566 _P1_2	=	0x0092
                           000093   567 _P1_3	=	0x0093
                           000094   568 _P1_4	=	0x0094
                           000095   569 _P1_5	=	0x0095
                           000096   570 _P1_6	=	0x0096
                           000097   571 _P1_7	=	0x0097
                           0000A0   572 _P2_0	=	0x00a0
                           0000A1   573 _P2_1	=	0x00a1
                           0000A2   574 _P2_2	=	0x00a2
                           0000A3   575 _P2_3	=	0x00a3
                           0000A4   576 _P2_4	=	0x00a4
                           0000A5   577 _P2_5	=	0x00a5
                           0000A6   578 _P2_6	=	0x00a6
                           0000A7   579 _P2_7	=	0x00a7
                           0000B0   580 _P3_0	=	0x00b0
                           0000B1   581 _P3_1	=	0x00b1
                           0000B2   582 _P3_2	=	0x00b2
                           0000B3   583 _P3_3	=	0x00b3
                           0000B4   584 _P3_4	=	0x00b4
                           0000B5   585 _P3_5	=	0x00b5
                           0000B6   586 _P3_6	=	0x00b6
                           0000B7   587 _P3_7	=	0x00b7
                           0000C8   588 _P5_0	=	0x00c8
                           0000C9   589 _P5_1	=	0x00c9
                           0000CA   590 _P5_2	=	0x00ca
                           0000CB   591 _P5_3	=	0x00cb
                           0000CC   592 _P5_4	=	0x00cc
                           0000CD   593 _P5_5	=	0x00cd
                           000088   594 _INT0TR	=	0x0088
                           00008A   595 _INT1TR	=	0x008a
                           0000A8   596 _INT0IE	=	0x00a8
                           0000AA   597 _INT1IE	=	0x00aa
                           0000AF   598 _EA	=	0x00af
                           0000D0   599 _P	=	0x00d0
                           0000D1   600 _F1	=	0x00d1
                           0000D2   601 _OV	=	0x00d2
                           0000D3   602 _RS0	=	0x00d3
                           0000D4   603 _RS1	=	0x00d4
                           0000D5   604 _F0	=	0x00d5
                           0000D6   605 _AC	=	0x00d6
                           0000D7   606 _CY	=	0x00d7
                           00008C   607 _T0RUN	=	0x008c
                           00008E   608 _T1RUN	=	0x008e
                           0000A9   609 _T0IE	=	0x00a9
                           0000AB   610 _T1IE	=	0x00ab
                           00009F   611 _S1SM0_FE	=	0x009f
                                    612 ;--------------------------------------------------------
                                    613 ; overlayable register banks
                                    614 ;--------------------------------------------------------
                                    615 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        616 	.ds 8
                                    617 ;--------------------------------------------------------
                                    618 ; internal ram data
                                    619 ;--------------------------------------------------------
                                    620 	.area DSEG    (DATA)
                                    621 ;--------------------------------------------------------
                                    622 ; overlayable items in internal ram 
                                    623 ;--------------------------------------------------------
                                    624 ;--------------------------------------------------------
                                    625 ; indirectly addressable internal ram data
                                    626 ;--------------------------------------------------------
                                    627 	.area ISEG    (DATA)
                                    628 ;--------------------------------------------------------
                                    629 ; absolute internal ram data
                                    630 ;--------------------------------------------------------
                                    631 	.area IABS    (ABS,DATA)
                                    632 	.area IABS    (ABS,DATA)
                                    633 ;--------------------------------------------------------
                                    634 ; bit data
                                    635 ;--------------------------------------------------------
                                    636 	.area BSEG    (BIT)
                                    637 ;--------------------------------------------------------
                                    638 ; paged external ram data
                                    639 ;--------------------------------------------------------
                                    640 	.area PSEG    (PAG,XDATA)
                                    641 ;--------------------------------------------------------
                                    642 ; external ram data
                                    643 ;--------------------------------------------------------
                                    644 	.area XSEG    (XDATA)
                           00FEA8   645 _ADCTIM	=	0xfea8
                           00FEAD   646 _ADCEXCFG	=	0xfead
                           00FA10   647 _DMA_ADC_CFG	=	0xfa10
                           00FA11   648 _DMA_ADC_CR	=	0xfa11
                           00FA12   649 _DMA_ADC_STA	=	0xfa12
                           00FA17   650 _DMA_ADC_RXAH	=	0xfa17
                           00FA18   651 _DMA_ADC_RXAL	=	0xfa18
                           00FA19   652 _DMA_ADC_CFG2	=	0xfa19
                           00FA1A   653 _DMA_ADC_CHSW0	=	0xfa1a
                           00FA1B   654 _DMA_ADC_CHSW1	=	0xfa1b
                           00FEAE   655 _CMPEXCFG	=	0xfeae
                           00FA00   656 _DMA_M2M_CFG	=	0xfa00
                           00FA01   657 _DMA_M2M_CR	=	0xfa01
                           00FA02   658 _DMA_M2M_STA	=	0xfa02
                           00FA03   659 _DMA_M2M_AMT	=	0xfa03
                           00FA04   660 _DMA_M2M_DONE	=	0xfa04
                           00FA05   661 _DMA_M2M_TXAH	=	0xfa05
                           00FA06   662 _DMA_M2M_TXAL	=	0xfa06
                           00FA07   663 _DMA_M2M_RXAH	=	0xfa07
                           00FA08   664 _DMA_M2M_RXAL	=	0xfa08
                           00FD01   665 _P1INTE	=	0xfd01
                           00FD11   666 _P1INTF	=	0xfd11
                           00FD21   667 _P1IM0	=	0xfd21
                           00FD31   668 _P1IM1	=	0xfd31
                           00FD41   669 _P1WKUE	=	0xfd41
                           00FE11   670 _P1PU	=	0xfe11
                           00FE19   671 _P1NCS	=	0xfe19
                           00FE21   672 _P1SR	=	0xfe21
                           00FE29   673 _P1DR	=	0xfe29
                           00FE31   674 _P1IE	=	0xfe31
                           00FD02   675 _P2INTE	=	0xfd02
                           00FD12   676 _P2INTF	=	0xfd12
                           00FD22   677 _P2IM0	=	0xfd22
                           00FD32   678 _P2IM1	=	0xfd32
                           00FD42   679 _P2WKUE	=	0xfd42
                           00FE12   680 _P2PU	=	0xfe12
                           00FE1A   681 _P2NCS	=	0xfe1a
                           00FE22   682 _P2SR	=	0xfe22
                           00FE2A   683 _P2DR	=	0xfe2a
                           00FE32   684 _P2IE	=	0xfe32
                           00FD03   685 _P3INTE	=	0xfd03
                           00FD13   686 _P3INTF	=	0xfd13
                           00FD23   687 _P3IM0	=	0xfd23
                           00FD33   688 _P3IM1	=	0xfd33
                           00FD43   689 _P3WKUE	=	0xfd43
                           00FE13   690 _P3PU	=	0xfe13
                           00FE1B   691 _P3NCS	=	0xfe1b
                           00FE23   692 _P3SR	=	0xfe23
                           00FE2B   693 _P3DR	=	0xfe2b
                           00FE33   694 _P3IE	=	0xfe33
                           00FD05   695 _P5INTE	=	0xfd05
                           00FD15   696 _P5INTF	=	0xfd15
                           00FD25   697 _P5IM0	=	0xfd25
                           00FD35   698 _P5IM1	=	0xfd35
                           00FD45   699 _P5WKUE	=	0xfd45
                           00FE15   700 _P5PU	=	0xfe15
                           00FE1D   701 _P5NCS	=	0xfe1d
                           00FE25   702 _P5SR	=	0xfe25
                           00FE2D   703 _P5DR	=	0xfe2d
                           00FE35   704 _P5IE	=	0xfe35
                           00FD60   705 _PINIPL	=	0xfd60
                           00FD61   706 _PINIPH	=	0xfd61
                           00FE80   707 _I2CCFG	=	0xfe80
                           00FE81   708 _I2CMSCR	=	0xfe81
                           00FE82   709 _I2CMSST	=	0xfe82
                           00FE83   710 _I2CSLCR	=	0xfe83
                           00FE84   711 _I2CSLST	=	0xfe84
                           00FE85   712 _I2CSLADR	=	0xfe85
                           00FE86   713 _I2CTXD	=	0xfe86
                           00FE87   714 _I2CRXD	=	0xfe87
                           00FE88   715 _I2CMSAUX	=	0xfe88
                           00FE50   716 _LCMCFG	=	0xfe50
                           00FE51   717 _LCMCFG2	=	0xfe51
                           00FE52   718 _LCMCR	=	0xfe52
                           00FE53   719 _LCMSTA	=	0xfe53
                           00FE54   720 _LCMIDDATL	=	0xfe54
                           00FE55   721 _LCMIDDATH	=	0xfe55
                           00FE54   722 _LCMIDDAT	=	0xfe54
                           00FA70   723 _DMA_LCM_CFG	=	0xfa70
                           00FA71   724 _DMA_LCM_CR	=	0xfa71
                           00FA72   725 _DMA_LCM_STA	=	0xfa72
                           00FA73   726 _DMA_LCM_AMT	=	0xfa73
                           00FA74   727 _DMA_LCM_DONE	=	0xfa74
                           00FA75   728 _DMA_LCM_TXAH	=	0xfa75
                           00FA76   729 _DMA_LCM_TXAL	=	0xfa76
                           00FA77   730 _DMA_LCM_RXAH	=	0xfa77
                           00FA78   731 _DMA_LCM_RXAL	=	0xfa78
                           00FCF0   732 _MD3	=	0xfcf0
                           00FCF1   733 _MD2	=	0xfcf1
                           00FCF2   734 _MD1	=	0xfcf2
                           00FCF3   735 _MD0	=	0xfcf3
                           00FCF4   736 _MD5	=	0xfcf4
                           00FCF5   737 _MD4	=	0xfcf5
                           00FCF6   738 _ARCON	=	0xfcf6
                           00FCF7   739 _OPCON	=	0xfcf7
                           00FE08   740 _SPFUNC	=	0xfe08
                           00FE09   741 _RSTFLAG	=	0xfe09
                           00FEB0   742 _PWMA_ETRPS	=	0xfeb0
                           00FEB1   743 _PWMA_ENO	=	0xfeb1
                           00FEB2   744 _PWMA_PS	=	0xfeb2
                           00FEB3   745 _PWMA_IOAUX	=	0xfeb3
                           00FEB4   746 _PWMB_ETRPS	=	0xfeb4
                           00FEB5   747 _PWMB_ENO	=	0xfeb5
                           00FEB6   748 _PWMB_PS	=	0xfeb6
                           00FEB7   749 _PWMB_IOAUX	=	0xfeb7
                           00FEC0   750 _PWMA_CR1	=	0xfec0
                           00FEC1   751 _PWMA_CR2	=	0xfec1
                           00FEC2   752 _PWMA_SMCR	=	0xfec2
                           00FEC3   753 _PWMA_ETR	=	0xfec3
                           00FEC4   754 _PWMA_IER	=	0xfec4
                           00FEC5   755 _PWMA_SR1	=	0xfec5
                           00FEC6   756 _PWMA_SR2	=	0xfec6
                           00FEC7   757 _PWMA_EGR	=	0xfec7
                           00FEC8   758 _PWMA_CCMR1	=	0xfec8
                           00FEC9   759 _PWMA_CCMR2	=	0xfec9
                           00FECA   760 _PWMA_CCMR3	=	0xfeca
                           00FECB   761 _PWMA_CCMR4	=	0xfecb
                           00FECC   762 _PWMA_CCER1	=	0xfecc
                           00FECD   763 _PWMA_CCER2	=	0xfecd
                           00FECE   764 _PWMA_CNTRH	=	0xfece
                           00FECF   765 _PWMA_CNTRL	=	0xfecf
                           00FED0   766 _PWMA_PSCRH	=	0xfed0
                           00FED1   767 _PWMA_PSCRL	=	0xfed1
                           00FED2   768 _PWMA_ARRH	=	0xfed2
                           00FED3   769 _PWMA_ARRL	=	0xfed3
                           00FED4   770 _PWMA_RCR	=	0xfed4
                           00FED5   771 _PWMA_CCR1H	=	0xfed5
                           00FED6   772 _PWMA_CCR1L	=	0xfed6
                           00FED7   773 _PWMA_CCR2H	=	0xfed7
                           00FED8   774 _PWMA_CCR2L	=	0xfed8
                           00FED9   775 _PWMA_CCR3H	=	0xfed9
                           00FEDA   776 _PWMA_CCR3L	=	0xfeda
                           00FEDB   777 _PWMA_CCR4H	=	0xfedb
                           00FEDC   778 _PWMA_CCR4L	=	0xfedc
                           00FEDD   779 _PWMA_BKR	=	0xfedd
                           00FEDE   780 _PWMA_DTR	=	0xfede
                           00FEDF   781 _PWMA_OISR	=	0xfedf
                           00FEE0   782 _PWMB_CR1	=	0xfee0
                           00FEE1   783 _PWMB_CR2	=	0xfee1
                           00FEE2   784 _PWMB_SMCR	=	0xfee2
                           00FEE3   785 _PWMB_ETR	=	0xfee3
                           00FEE4   786 _PWMB_IER	=	0xfee4
                           00FEE5   787 _PWMB_SR1	=	0xfee5
                           00FEE6   788 _PWMB_SR2	=	0xfee6
                           00FEE7   789 _PWMB_EGR	=	0xfee7
                           00FEE8   790 _PWMB_CCMR1	=	0xfee8
                           00FEE9   791 _PWMB_CCMR2	=	0xfee9
                           00FEEA   792 _PWMB_CCMR3	=	0xfeea
                           00FEEB   793 _PWMB_CCMR4	=	0xfeeb
                           00FEEC   794 _PWMB_CCER1	=	0xfeec
                           00FEED   795 _PWMB_CCER2	=	0xfeed
                           00FEEE   796 _PWMB_CNTRH	=	0xfeee
                           00FEEF   797 _PWMB_CNTRL	=	0xfeef
                           00FEF0   798 _PWMB_PSCRH	=	0xfef0
                           00FEF1   799 _PWMB_PSCRL	=	0xfef1
                           00FEF2   800 _PWMB_ARRH	=	0xfef2
                           00FEF3   801 _PWMB_ARRL	=	0xfef3
                           00FEF4   802 _PWMB_RCR	=	0xfef4
                           00FEF5   803 _PWMB_CCR1H	=	0xfef5
                           00FEF6   804 _PWMB_CCR1L	=	0xfef6
                           00FEF7   805 _PWMB_CCR2H	=	0xfef7
                           00FEF8   806 _PWMB_CCR2L	=	0xfef8
                           00FEF9   807 _PWMB_CCR3H	=	0xfef9
                           00FEFA   808 _PWMB_CCR3L	=	0xfefa
                           00FEFB   809 _PWMB_CCR4H	=	0xfefb
                           00FEFC   810 _PWMB_CCR4L	=	0xfefc
                           00FEFD   811 _PWMB_BKR	=	0xfefd
                           00FEFE   812 _PWMB_DTR	=	0xfefe
                           00FEFF   813 _PWMB_OISR	=	0xfeff
                           00FE60   814 _RTCCR	=	0xfe60
                           00FE61   815 _RTCCFG	=	0xfe61
                           00FE62   816 _RTCIEN	=	0xfe62
                           00FE63   817 _RTCIF	=	0xfe63
                           00FE64   818 _ALAHOUR	=	0xfe64
                           00FE65   819 _ALAMIN	=	0xfe65
                           00FE66   820 _ALASEC	=	0xfe66
                           00FE67   821 _ALASSEC	=	0xfe67
                           00FE68   822 _INIYEAR	=	0xfe68
                           00FE69   823 _INIMONTH	=	0xfe69
                           00FE6A   824 _INIDAY	=	0xfe6a
                           00FE6B   825 _INIHOUR	=	0xfe6b
                           00FE6C   826 _INIMIN	=	0xfe6c
                           00FE6D   827 _INISEC	=	0xfe6d
                           00FE6E   828 _INISSEC	=	0xfe6e
                           00FE70   829 _YEAR	=	0xfe70
                           00FE71   830 _MONTH	=	0xfe71
                           00FE72   831 _DAY	=	0xfe72
                           00FE73   832 _HOUR	=	0xfe73
                           00FE74   833 _MIN	=	0xfe74
                           00FE75   834 _SEC	=	0xfe75
                           00FE76   835 _SSEC	=	0xfe76
                           00FA20   836 _DMA_SPI_CFG	=	0xfa20
                           00FA21   837 _DMA_SPI_CR	=	0xfa21
                           00FA22   838 _DMA_SPI_STA	=	0xfa22
                           00FA23   839 _DMA_SPI_AMT	=	0xfa23
                           00FA24   840 _DMA_SPI_DONE	=	0xfa24
                           00FA25   841 _DMA_SPI_TXAH	=	0xfa25
                           00FA26   842 _DMA_SPI_TXAL	=	0xfa26
                           00FA27   843 _DMA_SPI_RXAH	=	0xfa27
                           00FA28   844 _DMA_SPI_RXAL	=	0xfa28
                           00FA29   845 _DMA_SPI_CFG2	=	0xfa29
                           00FE01   846 _CLKDIV	=	0xfe01
                           00FE02   847 _HIRCCR	=	0xfe02
                           00FE03   848 _XOSCCR	=	0xfe03
                           00FE04   849 _IRC32KCR	=	0xfe04
                           00FE00   850 _CKSEL	=	0xfe00
                           00FE05   851 _MCLKOCR	=	0xfe05
                           00FE06   852 _IRCDB	=	0xfe06
                           00FE07   853 _IRC48MCR	=	0xfe07
                           00FEA2   854 _TM2PS	=	0xfea2
                           00FEA3   855 _TM3PS	=	0xfea3
                           00FEA4   856 _TM4PS	=	0xfea4
                           00FA30   857 _DMA_UR1T_CFG	=	0xfa30
                           00FA31   858 _DMA_UR1T_CR	=	0xfa31
                           00FA32   859 _DMA_UR1T_STA	=	0xfa32
                           00FA33   860 _DMA_URTX_AMT	=	0xfa33
                           00FA34   861 _DMA_UR1T_DONE	=	0xfa34
                           00FA35   862 _DMA_UR1T_TXAH	=	0xfa35
                           00FA36   863 _DMA_UR1T_TXAL	=	0xfa36
                           00FA38   864 _DMA_UR1R_CFG	=	0xfa38
                           00FA39   865 _DMA_UR1R_CR	=	0xfa39
                           00FA3A   866 _DMA_UR1R_STA	=	0xfa3a
                           00FA3B   867 _DMA_UR1R_AMT	=	0xfa3b
                           00FA3C   868 _DMA_UR1R_DONE	=	0xfa3c
                           00FA3D   869 _DMA_UR1R_TXAH	=	0xfa3d
                           00FA3E   870 _DMA_UR1R_TXAL	=	0xfa3e
                           00FA30   871 _DMA_UR2T_CFG	=	0xfa30
                           00FA31   872 _DMA_UR2T_CR	=	0xfa31
                           00FA32   873 _DMA_UR2T_STA	=	0xfa32
                           00FA33   874 _DMA_UR2T_AMT	=	0xfa33
                           00FA34   875 _DMA_UR2T_DONE	=	0xfa34
                           00FA35   876 _DMA_UR2T_TXAH	=	0xfa35
                           00FA36   877 _DMA_UR2T_TXAL	=	0xfa36
                           00FA38   878 _DMA_UR2R_CFG	=	0xfa38
                           00FA39   879 _DMA_UR2R_CR	=	0xfa39
                           00FA3A   880 _DMA_UR2R_STA	=	0xfa3a
                           00FA3B   881 _DMA_UR2R_AMT	=	0xfa3b
                           00FA3C   882 _DMA_UR2R_DONE	=	0xfa3c
                           00FA3D   883 _DMA_UR2R_TXAH	=	0xfa3d
                           00FA3E   884 _DMA_UR2R_TXAL	=	0xfa3e
                           00FA30   885 _DMA_UR3T_CFG	=	0xfa30
                           00FA31   886 _DMA_UR3T_CR	=	0xfa31
                           00FA32   887 _DMA_UR3T_STA	=	0xfa32
                           00FA33   888 _DMA_UR3T_AMT	=	0xfa33
                           00FA34   889 _DMA_UR3T_DONE	=	0xfa34
                           00FA35   890 _DMA_UR3T_TXAH	=	0xfa35
                           00FA36   891 _DMA_UR3T_TXAL	=	0xfa36
                           00FA38   892 _DMA_UR3R_CFG	=	0xfa38
                           00FA39   893 _DMA_UR3R_CR	=	0xfa39
                           00FA3A   894 _DMA_UR3R_STA	=	0xfa3a
                           00FA3B   895 _DMA_UR3R_AMT	=	0xfa3b
                           00FA3C   896 _DMA_UR3R_DONE	=	0xfa3c
                           00FA3D   897 _DMA_UR3R_TXAH	=	0xfa3d
                           00FA3E   898 _DMA_UR3R_TXAL	=	0xfa3e
                           00FA30   899 _DMA_UR4T_CFG	=	0xfa30
                           00FA31   900 _DMA_UR4T_CR	=	0xfa31
                           00FA32   901 _DMA_UR4T_STA	=	0xfa32
                           00FA33   902 _DMA_UR4T_AMT	=	0xfa33
                           00FA34   903 _DMA_UR4T_DONE	=	0xfa34
                           00FA35   904 _DMA_UR4T_TXAH	=	0xfa35
                           00FA36   905 _DMA_UR4T_TXAL	=	0xfa36
                           00FA38   906 _DMA_UR4R_CFG	=	0xfa38
                           00FA39   907 _DMA_UR4R_CR	=	0xfa39
                           00FA3A   908 _DMA_UR4R_STA	=	0xfa3a
                           00FA3B   909 _DMA_UR4R_AMT	=	0xfa3b
                           00FA3C   910 _DMA_UR4R_DONE	=	0xfa3c
                           00FA3D   911 _DMA_UR4R_TXAH	=	0xfa3d
                           00FA3E   912 _DMA_UR4R_TXAL	=	0xfa3e
      000000                        913 _uartGetCharacter_result_65536_69:
      000000                        914 	.ds 1
                                    915 ;--------------------------------------------------------
                                    916 ; absolute external ram data
                                    917 ;--------------------------------------------------------
                                    918 	.area XABS    (ABS,XDATA)
                                    919 ;--------------------------------------------------------
                                    920 ; external initialized ram data
                                    921 ;--------------------------------------------------------
                                    922 	.area XISEG   (XDATA)
      000000                        923 _current_page::
      000000                        924 	.ds 1
      000001                        925 _application_process_func::
      000001                        926 	.ds 16
      000011                        927 _float_digit_pointer::
      000011                        928 	.ds 1
      000012                        929 _float_digits::
      000012                        930 	.ds 5
      000017                        931 _inputs::
      000017                        932 	.ds 16
      000027                        933 _stepper_movement::
      000027                        934 	.ds 11
                                    935 	.area HOME    (CODE)
                                    936 	.area GSINIT0 (CODE)
                                    937 	.area GSINIT1 (CODE)
                                    938 	.area GSINIT2 (CODE)
                                    939 	.area GSINIT3 (CODE)
                                    940 	.area GSINIT4 (CODE)
                                    941 	.area GSINIT5 (CODE)
                                    942 	.area GSINIT  (CODE)
                                    943 	.area GSFINAL (CODE)
                                    944 	.area CSEG    (CODE)
                                    945 ;--------------------------------------------------------
                                    946 ; global & static initialisations
                                    947 ;--------------------------------------------------------
                                    948 	.area HOME    (CODE)
                                    949 	.area GSINIT  (CODE)
                                    950 	.area GSFINAL (CODE)
                                    951 	.area GSINIT  (CODE)
                                    952 ;--------------------------------------------------------
                                    953 ; Home
                                    954 ;--------------------------------------------------------
                                    955 	.area HOME    (CODE)
                                    956 	.area HOME    (CODE)
                                    957 ;--------------------------------------------------------
                                    958 ; code
                                    959 ;--------------------------------------------------------
                                    960 	.area CSEG    (CODE)
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'application_process_welcome_page'
                                    963 ;------------------------------------------------------------
                                    964 ;	application.c:34: void application_process_welcome_page(void) {
                                    965 ;	-----------------------------------------
                                    966 ;	 function application_process_welcome_page
                                    967 ;	-----------------------------------------
      000000                        968 _application_process_welcome_page:
                           000007   969 	ar7 = 0x07
                           000006   970 	ar6 = 0x06
                           000005   971 	ar5 = 0x05
                           000004   972 	ar4 = 0x04
                           000003   973 	ar3 = 0x03
                           000002   974 	ar2 = 0x02
                           000001   975 	ar1 = 0x01
                           000000   976 	ar0 = 0x00
                                    977 ;	application.c:37: inputs.button1.current_val = inputs.button1.get_func();
      000000 90r00r18         [24]  978 	mov	dptr,#(_inputs + 0x0001)
      000003 E0               [24]  979 	movx	a,@dptr
      000004 FE               [12]  980 	mov	r6,a
      000005 A3               [24]  981 	inc	dptr
      000006 E0               [24]  982 	movx	a,@dptr
      000007 FF               [12]  983 	mov	r7,a
      000008 C0 07            [24]  984 	push	ar7
      00000A 8E 82            [24]  985 	mov	dpl,r6
      00000C 8F 83            [24]  986 	mov	dph,r7
      00000E 12r00r00         [24]  987 	lcall	__sdcc_call_dptr
      000011 AE 82            [24]  988 	mov	r6,dpl
      000013 D0 07            [24]  989 	pop	ar7
      000015 90r00r17         [24]  990 	mov	dptr,#_inputs
      000018 EE               [12]  991 	mov	a,r6
      000019 F0               [24]  992 	movx	@dptr,a
                                    993 ;	application.c:38: inputs.button2.current_val = inputs.button2.get_func();
      00001A 90r00r1B         [24]  994 	mov	dptr,#(_inputs + 0x0004)
      00001D E0               [24]  995 	movx	a,@dptr
      00001E FE               [12]  996 	mov	r6,a
      00001F A3               [24]  997 	inc	dptr
      000020 E0               [24]  998 	movx	a,@dptr
      000021 FF               [12]  999 	mov	r7,a
      000022 C0 07            [24] 1000 	push	ar7
      000024 8E 82            [24] 1001 	mov	dpl,r6
      000026 8F 83            [24] 1002 	mov	dph,r7
      000028 12r00r00         [24] 1003 	lcall	__sdcc_call_dptr
      00002B AE 82            [24] 1004 	mov	r6,dpl
      00002D D0 07            [24] 1005 	pop	ar7
      00002F 90r00r1A         [24] 1006 	mov	dptr,#(_inputs + 0x0003)
      000032 EE               [12] 1007 	mov	a,r6
      000033 F0               [24] 1008 	movx	@dptr,a
                                   1009 ;	application.c:39: inputs.encoder_button.current_val = inputs.encoder_button.get_func();
      000034 90r00r1E         [24] 1010 	mov	dptr,#(_inputs + 0x0007)
      000037 E0               [24] 1011 	movx	a,@dptr
      000038 FE               [12] 1012 	mov	r6,a
      000039 A3               [24] 1013 	inc	dptr
      00003A E0               [24] 1014 	movx	a,@dptr
      00003B FF               [12] 1015 	mov	r7,a
      00003C C0 07            [24] 1016 	push	ar7
      00003E 8E 82            [24] 1017 	mov	dpl,r6
      000040 8F 83            [24] 1018 	mov	dph,r7
      000042 12r00r00         [24] 1019 	lcall	__sdcc_call_dptr
      000045 AE 82            [24] 1020 	mov	r6,dpl
      000047 D0 07            [24] 1021 	pop	ar7
      000049 90r00r1D         [24] 1022 	mov	dptr,#(_inputs + 0x0006)
      00004C EE               [12] 1023 	mov	a,r6
      00004D F0               [24] 1024 	movx	@dptr,a
                                   1025 ;	application.c:42: if (inputs.button1.current_val == BUTTON_PRESSED \
      00004E 90r00r17         [24] 1026 	mov	dptr,#_inputs
      000051 E0               [24] 1027 	movx	a,@dptr
      000052 FF               [12] 1028 	mov	r7,a
      000053 BF 01 02         [24] 1029 	cjne	r7,#0x01,00115$
      000056 80 12            [24] 1030 	sjmp	00101$
      000058                       1031 00115$:
      000058 90r00r1A         [24] 1032 	mov	dptr,#(_inputs + 0x0003)
      00005B E0               [24] 1033 	movx	a,@dptr
      00005C FF               [12] 1034 	mov	r7,a
      00005D BF 01 02         [24] 1035 	cjne	r7,#0x01,00116$
      000060 80 08            [24] 1036 	sjmp	00101$
      000062                       1037 00116$:
      000062 90r00r1D         [24] 1038 	mov	dptr,#(_inputs + 0x0006)
      000065 E0               [24] 1039 	movx	a,@dptr
      000066 FF               [12] 1040 	mov	r7,a
      000067 BF 01 0C         [24] 1041 	cjne	r7,#0x01,00105$
      00006A                       1042 00101$:
                                   1043 ;	application.c:45: current_page = MENU_PAGE;
      00006A 90r00r00         [24] 1044 	mov	dptr,#_current_page
      00006D 74 01            [12] 1045 	mov	a,#0x01
      00006F F0               [24] 1046 	movx	@dptr,a
                                   1047 ;	application.c:46: display_menu_page(STEP_CONTROL_PAGE_SELECTED);
      000070 75 82 00         [24] 1048 	mov	dpl,#0x00
                                   1049 ;	application.c:47: return;
                                   1050 ;	application.c:50: }
      000073 02r00r00         [24] 1051 	ljmp	_display_menu_page
      000076                       1052 00105$:
      000076 22               [24] 1053 	ret
                                   1054 ;------------------------------------------------------------
                                   1055 ;Allocation info for local variables in function 'application_process_menu_page'
                                   1056 ;------------------------------------------------------------
                                   1057 ;	application.c:52: void application_process_menu_page(void) {
                                   1058 ;	-----------------------------------------
                                   1059 ;	 function application_process_menu_page
                                   1060 ;	-----------------------------------------
      000077                       1061 _application_process_menu_page:
                                   1062 ;	application.c:55: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      000077 90r00r25         [24] 1063 	mov	dptr,#(_inputs + 0x000e)
      00007A E0               [24] 1064 	movx	a,@dptr
      00007B FE               [12] 1065 	mov	r6,a
      00007C A3               [24] 1066 	inc	dptr
      00007D E0               [24] 1067 	movx	a,@dptr
      00007E FF               [12] 1068 	mov	r7,a
      00007F 8E 82            [24] 1069 	mov	dpl,r6
      000081 8F 83            [24] 1070 	mov	dph,r7
      000083 12r00r00         [24] 1071 	lcall	__sdcc_call_dptr
      000086 AE 82            [24] 1072 	mov	r6,dpl
      000088 AF 83            [24] 1073 	mov	r7,dph
      00008A 90r00r23         [24] 1074 	mov	dptr,#(_inputs + 0x000c)
      00008D EE               [12] 1075 	mov	a,r6
      00008E F0               [24] 1076 	movx	@dptr,a
      00008F EF               [12] 1077 	mov	a,r7
      000090 A3               [24] 1078 	inc	dptr
      000091 F0               [24] 1079 	movx	@dptr,a
                                   1080 ;	application.c:56: inputs.encoder_button.current_val = inputs.encoder_button.get_func();
      000092 90r00r1E         [24] 1081 	mov	dptr,#(_inputs + 0x0007)
      000095 E0               [24] 1082 	movx	a,@dptr
      000096 FE               [12] 1083 	mov	r6,a
      000097 A3               [24] 1084 	inc	dptr
      000098 E0               [24] 1085 	movx	a,@dptr
      000099 FF               [12] 1086 	mov	r7,a
      00009A C0 07            [24] 1087 	push	ar7
      00009C 8E 82            [24] 1088 	mov	dpl,r6
      00009E 8F 83            [24] 1089 	mov	dph,r7
      0000A0 12r00r00         [24] 1090 	lcall	__sdcc_call_dptr
      0000A3 AE 82            [24] 1091 	mov	r6,dpl
      0000A5 D0 07            [24] 1092 	pop	ar7
      0000A7 90r00r1D         [24] 1093 	mov	dptr,#(_inputs + 0x0006)
      0000AA EE               [12] 1094 	mov	a,r6
      0000AB F0               [24] 1095 	movx	@dptr,a
                                   1096 ;	application.c:60: if (inputs.encoder_value.current_val >= CONTROL_PAGE_NUM) {
      0000AC 90r00r23         [24] 1097 	mov	dptr,#(_inputs + 0x000c)
      0000AF E0               [24] 1098 	movx	a,@dptr
      0000B0 FE               [12] 1099 	mov	r6,a
      0000B1 A3               [24] 1100 	inc	dptr
      0000B2 E0               [24] 1101 	movx	a,@dptr
      0000B3 FF               [12] 1102 	mov	r7,a
      0000B4 C3               [12] 1103 	clr	c
      0000B5 EE               [12] 1104 	mov	a,r6
      0000B6 94 03            [12] 1105 	subb	a,#0x03
      0000B8 EF               [12] 1106 	mov	a,r7
      0000B9 64 80            [12] 1107 	xrl	a,#0x80
      0000BB 94 80            [12] 1108 	subb	a,#0x80
      0000BD 40 20            [24] 1109 	jc	00104$
                                   1110 ;	application.c:61: encoder_count_reset();
      0000BF 12r00r00         [24] 1111 	lcall	_encoder_count_reset
                                   1112 ;	application.c:62: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      0000C2 90r00r25         [24] 1113 	mov	dptr,#(_inputs + 0x000e)
      0000C5 E0               [24] 1114 	movx	a,@dptr
      0000C6 FC               [12] 1115 	mov	r4,a
      0000C7 A3               [24] 1116 	inc	dptr
      0000C8 E0               [24] 1117 	movx	a,@dptr
      0000C9 FD               [12] 1118 	mov	r5,a
      0000CA 8C 82            [24] 1119 	mov	dpl,r4
      0000CC 8D 83            [24] 1120 	mov	dph,r5
      0000CE 12r00r00         [24] 1121 	lcall	__sdcc_call_dptr
      0000D1 AC 82            [24] 1122 	mov	r4,dpl
      0000D3 AD 83            [24] 1123 	mov	r5,dph
      0000D5 90r00r23         [24] 1124 	mov	dptr,#(_inputs + 0x000c)
      0000D8 EC               [12] 1125 	mov	a,r4
      0000D9 F0               [24] 1126 	movx	@dptr,a
      0000DA ED               [12] 1127 	mov	a,r5
      0000DB A3               [24] 1128 	inc	dptr
      0000DC F0               [24] 1129 	movx	@dptr,a
      0000DD 80 25            [24] 1130 	sjmp	00105$
      0000DF                       1131 00104$:
                                   1132 ;	application.c:64: } else if (inputs.encoder_value.current_val < 0) {
      0000DF EF               [12] 1133 	mov	a,r7
      0000E0 30 E7 21         [24] 1134 	jnb	acc.7,00105$
                                   1135 ;	application.c:65: encoder_count_set(CONTROL_PAGE_NUM-1);
      0000E3 90 00 02         [24] 1136 	mov	dptr,#0x0002
      0000E6 12r00r00         [24] 1137 	lcall	_encoder_count_set
                                   1138 ;	application.c:66: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      0000E9 90r00r25         [24] 1139 	mov	dptr,#(_inputs + 0x000e)
      0000EC E0               [24] 1140 	movx	a,@dptr
      0000ED FE               [12] 1141 	mov	r6,a
      0000EE A3               [24] 1142 	inc	dptr
      0000EF E0               [24] 1143 	movx	a,@dptr
      0000F0 FF               [12] 1144 	mov	r7,a
      0000F1 8E 82            [24] 1145 	mov	dpl,r6
      0000F3 8F 83            [24] 1146 	mov	dph,r7
      0000F5 12r00r00         [24] 1147 	lcall	__sdcc_call_dptr
      0000F8 AE 82            [24] 1148 	mov	r6,dpl
      0000FA AF 83            [24] 1149 	mov	r7,dph
      0000FC 90r00r23         [24] 1150 	mov	dptr,#(_inputs + 0x000c)
      0000FF EE               [12] 1151 	mov	a,r6
      000100 F0               [24] 1152 	movx	@dptr,a
      000101 EF               [12] 1153 	mov	a,r7
      000102 A3               [24] 1154 	inc	dptr
      000103 F0               [24] 1155 	movx	@dptr,a
      000104                       1156 00105$:
                                   1157 ;	application.c:69: if(inputs.encoder_button.current_val == BUTTON_PRESSED) {
      000104 90r00r1D         [24] 1158 	mov	dptr,#(_inputs + 0x0006)
      000107 E0               [24] 1159 	movx	a,@dptr
      000108 FF               [12] 1160 	mov	r7,a
      000109 BF 01 44         [24] 1161 	cjne	r7,#0x01,00111$
                                   1162 ;	application.c:70: switch(inputs.encoder_value.current_val) {
      00010C 90r00r23         [24] 1163 	mov	dptr,#(_inputs + 0x000c)
      00010F E0               [24] 1164 	movx	a,@dptr
      000110 FE               [12] 1165 	mov	r6,a
      000111 A3               [24] 1166 	inc	dptr
      000112 E0               [24] 1167 	movx	a,@dptr
      000113 FF               [12] 1168 	mov	r7,a
      000114 BE 00 05         [24] 1169 	cjne	r6,#0x00,00142$
      000117 BF 00 02         [24] 1170 	cjne	r7,#0x00,00142$
      00011A 80 10            [24] 1171 	sjmp	00106$
      00011C                       1172 00142$:
      00011C BE 01 05         [24] 1173 	cjne	r6,#0x01,00143$
      00011F BF 00 02         [24] 1174 	cjne	r7,#0x00,00143$
      000122 80 14            [24] 1175 	sjmp	00107$
      000124                       1176 00143$:
                                   1177 ;	application.c:71: case 0:
      000124 BE 02 29         [24] 1178 	cjne	r6,#0x02,00111$
      000127 BF 00 26         [24] 1179 	cjne	r7,#0x00,00111$
      00012A 80 18            [24] 1180 	sjmp	00108$
      00012C                       1181 00106$:
                                   1182 ;	application.c:72: current_page = STEP_CONTROL_PAGE;
      00012C 90r00r00         [24] 1183 	mov	dptr,#_current_page
      00012F 74 02            [12] 1184 	mov	a,#0x02
      000131 F0               [24] 1185 	movx	@dptr,a
                                   1186 ;	application.c:73: encoder_count_reset();
      000132 12r00r00         [24] 1187 	lcall	_encoder_count_reset
                                   1188 ;	application.c:74: display_step_control_page_first_time();
                                   1189 ;	application.c:75: return;
                                   1190 ;	application.c:77: case 1:
      000135 02r00r00         [24] 1191 	ljmp	_display_step_control_page_first_time
      000138                       1192 00107$:
                                   1193 ;	application.c:78: current_page = DISTANCE_CONTROL_PAGE;
      000138 90r00r00         [24] 1194 	mov	dptr,#_current_page
      00013B 74 03            [12] 1195 	mov	a,#0x03
      00013D F0               [24] 1196 	movx	@dptr,a
                                   1197 ;	application.c:79: encoder_count_reset();
      00013E 12r00r00         [24] 1198 	lcall	_encoder_count_reset
                                   1199 ;	application.c:80: display_distance_control_page_first_time();
                                   1200 ;	application.c:81: return;
                                   1201 ;	application.c:83: case 2:
      000141 02r00r00         [24] 1202 	ljmp	_display_distance_control_page_first_time
      000144                       1203 00108$:
                                   1204 ;	application.c:84: current_page = ENCODER_CONTROL_PAGE;
      000144 90r00r00         [24] 1205 	mov	dptr,#_current_page
      000147 74 04            [12] 1206 	mov	a,#0x04
      000149 F0               [24] 1207 	movx	@dptr,a
                                   1208 ;	application.c:85: encoder_count_reset();
      00014A 12r00r00         [24] 1209 	lcall	_encoder_count_reset
                                   1210 ;	application.c:86: display_encoder_control_page_first_time();
                                   1211 ;	application.c:87: return;
                                   1212 ;	application.c:88: }
      00014D 02r00r00         [24] 1213 	ljmp	_display_encoder_control_page_first_time
      000150                       1214 00111$:
                                   1215 ;	application.c:92: display_menu_page(inputs.encoder_value.current_val);
      000150 90r00r23         [24] 1216 	mov	dptr,#(_inputs + 0x000c)
      000153 E0               [24] 1217 	movx	a,@dptr
      000154 F5 82            [12] 1218 	mov	dpl,a
                                   1219 ;	application.c:94: }
      000156 02r00r00         [24] 1220 	ljmp	_display_menu_page
                                   1221 ;------------------------------------------------------------
                                   1222 ;Allocation info for local variables in function 'application_process_step_control_page'
                                   1223 ;------------------------------------------------------------
                                   1224 ;	application.c:96: void application_process_step_control_page(void) {
                                   1225 ;	-----------------------------------------
                                   1226 ;	 function application_process_step_control_page
                                   1227 ;	-----------------------------------------
      000159                       1228 _application_process_step_control_page:
                                   1229 ;	application.c:99: inputs.button1.current_val = inputs.button1.get_func();
      000159 90r00r18         [24] 1230 	mov	dptr,#(_inputs + 0x0001)
      00015C E0               [24] 1231 	movx	a,@dptr
      00015D FE               [12] 1232 	mov	r6,a
      00015E A3               [24] 1233 	inc	dptr
      00015F E0               [24] 1234 	movx	a,@dptr
      000160 FF               [12] 1235 	mov	r7,a
      000161 C0 07            [24] 1236 	push	ar7
      000163 8E 82            [24] 1237 	mov	dpl,r6
      000165 8F 83            [24] 1238 	mov	dph,r7
      000167 12r00r00         [24] 1239 	lcall	__sdcc_call_dptr
      00016A AE 82            [24] 1240 	mov	r6,dpl
      00016C D0 07            [24] 1241 	pop	ar7
      00016E 90r00r17         [24] 1242 	mov	dptr,#_inputs
      000171 EE               [12] 1243 	mov	a,r6
      000172 F0               [24] 1244 	movx	@dptr,a
                                   1245 ;	application.c:100: inputs.button2.current_val = inputs.button2.get_func();
      000173 90r00r1B         [24] 1246 	mov	dptr,#(_inputs + 0x0004)
      000176 E0               [24] 1247 	movx	a,@dptr
      000177 FE               [12] 1248 	mov	r6,a
      000178 A3               [24] 1249 	inc	dptr
      000179 E0               [24] 1250 	movx	a,@dptr
      00017A FF               [12] 1251 	mov	r7,a
      00017B C0 07            [24] 1252 	push	ar7
      00017D 8E 82            [24] 1253 	mov	dpl,r6
      00017F 8F 83            [24] 1254 	mov	dph,r7
      000181 12r00r00         [24] 1255 	lcall	__sdcc_call_dptr
      000184 AE 82            [24] 1256 	mov	r6,dpl
      000186 D0 07            [24] 1257 	pop	ar7
      000188 90r00r1A         [24] 1258 	mov	dptr,#(_inputs + 0x0003)
      00018B EE               [12] 1259 	mov	a,r6
      00018C F0               [24] 1260 	movx	@dptr,a
                                   1261 ;	application.c:101: inputs.encoder_button.current_val = inputs.encoder_button.get_func();
      00018D 90r00r1E         [24] 1262 	mov	dptr,#(_inputs + 0x0007)
      000190 E0               [24] 1263 	movx	a,@dptr
      000191 FE               [12] 1264 	mov	r6,a
      000192 A3               [24] 1265 	inc	dptr
      000193 E0               [24] 1266 	movx	a,@dptr
      000194 FF               [12] 1267 	mov	r7,a
      000195 C0 07            [24] 1268 	push	ar7
      000197 8E 82            [24] 1269 	mov	dpl,r6
      000199 8F 83            [24] 1270 	mov	dph,r7
      00019B 12r00r00         [24] 1271 	lcall	__sdcc_call_dptr
      00019E AE 82            [24] 1272 	mov	r6,dpl
      0001A0 D0 07            [24] 1273 	pop	ar7
      0001A2 90r00r1D         [24] 1274 	mov	dptr,#(_inputs + 0x0006)
      0001A5 EE               [12] 1275 	mov	a,r6
      0001A6 F0               [24] 1276 	movx	@dptr,a
                                   1277 ;	application.c:102: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      0001A7 90r00r25         [24] 1278 	mov	dptr,#(_inputs + 0x000e)
      0001AA E0               [24] 1279 	movx	a,@dptr
      0001AB FE               [12] 1280 	mov	r6,a
      0001AC A3               [24] 1281 	inc	dptr
      0001AD E0               [24] 1282 	movx	a,@dptr
      0001AE FF               [12] 1283 	mov	r7,a
      0001AF 8E 82            [24] 1284 	mov	dpl,r6
      0001B1 8F 83            [24] 1285 	mov	dph,r7
      0001B3 12r00r00         [24] 1286 	lcall	__sdcc_call_dptr
      0001B6 AE 82            [24] 1287 	mov	r6,dpl
      0001B8 AF 83            [24] 1288 	mov	r7,dph
      0001BA 90r00r23         [24] 1289 	mov	dptr,#(_inputs + 0x000c)
      0001BD EE               [12] 1290 	mov	a,r6
      0001BE F0               [24] 1291 	movx	@dptr,a
      0001BF EF               [12] 1292 	mov	a,r7
      0001C0 A3               [24] 1293 	inc	dptr
      0001C1 F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	application.c:103: inputs.switch_.current_val = inputs.switch_.get_func();
      0001C2 90r00r21         [24] 1296 	mov	dptr,#(_inputs + 0x000a)
      0001C5 E0               [24] 1297 	movx	a,@dptr
      0001C6 FE               [12] 1298 	mov	r6,a
      0001C7 A3               [24] 1299 	inc	dptr
      0001C8 E0               [24] 1300 	movx	a,@dptr
      0001C9 FF               [12] 1301 	mov	r7,a
      0001CA C0 07            [24] 1302 	push	ar7
      0001CC 8E 82            [24] 1303 	mov	dpl,r6
      0001CE 8F 83            [24] 1304 	mov	dph,r7
      0001D0 12r00r00         [24] 1305 	lcall	__sdcc_call_dptr
      0001D3 AE 82            [24] 1306 	mov	r6,dpl
      0001D5 D0 07            [24] 1307 	pop	ar7
      0001D7 90r00r20         [24] 1308 	mov	dptr,#(_inputs + 0x0009)
      0001DA EE               [12] 1309 	mov	a,r6
      0001DB F0               [24] 1310 	movx	@dptr,a
                                   1311 ;	application.c:107: if (inputs.button2.current_val == BUTTON_PRESSED) {
      0001DC 90r00r1A         [24] 1312 	mov	dptr,#(_inputs + 0x0003)
      0001DF E0               [24] 1313 	movx	a,@dptr
      0001E0 FF               [12] 1314 	mov	r7,a
      0001E1 BF 01 1C         [24] 1315 	cjne	r7,#0x01,00102$
                                   1316 ;	application.c:108: stepper_movement.stepper_direction = !stepper_movement.stepper_direction;
      0001E4 90r00r28         [24] 1317 	mov	dptr,#(_stepper_movement + 0x0001)
      0001E7 E0               [24] 1318 	movx	a,@dptr
      0001E8 B4 01 00         [24] 1319 	cjne	a,#0x01,00180$
      0001EB                       1320 00180$:
      0001EB E4               [12] 1321 	clr	a
      0001EC 33               [12] 1322 	rlc	a
      0001ED FF               [12] 1323 	mov	r7,a
      0001EE 90r00r28         [24] 1324 	mov	dptr,#(_stepper_movement + 0x0001)
      0001F1 F0               [24] 1325 	movx	@dptr,a
                                   1326 ;	application.c:109: stepper_set_dir(stepper_movement.stepper_direction);
      0001F2 8F 82            [24] 1327 	mov	dpl,r7
      0001F4 12r00r00         [24] 1328 	lcall	_stepper_set_dir
                                   1329 ;	application.c:110: display_update_stepper_dir(stepper_movement.stepper_direction);
      0001F7 90r00r28         [24] 1330 	mov	dptr,#(_stepper_movement + 0x0001)
      0001FA E0               [24] 1331 	movx	a,@dptr
      0001FB F5 82            [12] 1332 	mov	dpl,a
      0001FD 12r00r00         [24] 1333 	lcall	_display_update_stepper_dir
      000200                       1334 00102$:
                                   1335 ;	application.c:114: if (inputs.switch_.current_val != stepper_movement.stepper_enable_status) {
      000200 90r00r20         [24] 1336 	mov	dptr,#(_inputs + 0x0009)
      000203 E0               [24] 1337 	movx	a,@dptr
      000204 FF               [12] 1338 	mov	r7,a
      000205 90r00r27         [24] 1339 	mov	dptr,#_stepper_movement
      000208 E0               [24] 1340 	movx	a,@dptr
      000209 FE               [12] 1341 	mov	r6,a
      00020A EF               [12] 1342 	mov	a,r7
      00020B B5 06 02         [24] 1343 	cjne	a,ar6,00181$
      00020E 80 19            [24] 1344 	sjmp	00104$
      000210                       1345 00181$:
                                   1346 ;	application.c:115: stepper_movement.stepper_enable_status = !stepper_movement.stepper_enable_status;
      000210 EE               [12] 1347 	mov	a,r6
      000211 B4 01 00         [24] 1348 	cjne	a,#0x01,00182$
      000214                       1349 00182$:
      000214 E4               [12] 1350 	clr	a
      000215 33               [12] 1351 	rlc	a
      000216 FF               [12] 1352 	mov	r7,a
      000217 90r00r27         [24] 1353 	mov	dptr,#_stepper_movement
      00021A F0               [24] 1354 	movx	@dptr,a
                                   1355 ;	application.c:116: stepper_set_enable(stepper_movement.stepper_enable_status);
      00021B 8F 82            [24] 1356 	mov	dpl,r7
      00021D 12r00r00         [24] 1357 	lcall	_stepper_set_enable
                                   1358 ;	application.c:117: display_update_stepper_enable(stepper_movement.stepper_enable_status);
      000220 90r00r27         [24] 1359 	mov	dptr,#_stepper_movement
      000223 E0               [24] 1360 	movx	a,@dptr
      000224 F5 82            [12] 1361 	mov	dpl,a
      000226 12r00r00         [24] 1362 	lcall	_display_update_stepper_enable
      000229                       1363 00104$:
                                   1364 ;	application.c:121: if (inputs.encoder_value.current_val >= STEP_CONTROL_PAGE_OPTIONS_NUM) {
      000229 90r00r23         [24] 1365 	mov	dptr,#(_inputs + 0x000c)
      00022C E0               [24] 1366 	movx	a,@dptr
      00022D FE               [12] 1367 	mov	r6,a
      00022E A3               [24] 1368 	inc	dptr
      00022F E0               [24] 1369 	movx	a,@dptr
      000230 FF               [12] 1370 	mov	r7,a
      000231 C3               [12] 1371 	clr	c
      000232 EE               [12] 1372 	mov	a,r6
      000233 94 05            [12] 1373 	subb	a,#0x05
      000235 EF               [12] 1374 	mov	a,r7
      000236 64 80            [12] 1375 	xrl	a,#0x80
      000238 94 80            [12] 1376 	subb	a,#0x80
      00023A 40 20            [24] 1377 	jc	00108$
                                   1378 ;	application.c:122: encoder_count_reset();
      00023C 12r00r00         [24] 1379 	lcall	_encoder_count_reset
                                   1380 ;	application.c:123: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      00023F 90r00r25         [24] 1381 	mov	dptr,#(_inputs + 0x000e)
      000242 E0               [24] 1382 	movx	a,@dptr
      000243 FC               [12] 1383 	mov	r4,a
      000244 A3               [24] 1384 	inc	dptr
      000245 E0               [24] 1385 	movx	a,@dptr
      000246 FD               [12] 1386 	mov	r5,a
      000247 8C 82            [24] 1387 	mov	dpl,r4
      000249 8D 83            [24] 1388 	mov	dph,r5
      00024B 12r00r00         [24] 1389 	lcall	__sdcc_call_dptr
      00024E AC 82            [24] 1390 	mov	r4,dpl
      000250 AD 83            [24] 1391 	mov	r5,dph
      000252 90r00r23         [24] 1392 	mov	dptr,#(_inputs + 0x000c)
      000255 EC               [12] 1393 	mov	a,r4
      000256 F0               [24] 1394 	movx	@dptr,a
      000257 ED               [12] 1395 	mov	a,r5
      000258 A3               [24] 1396 	inc	dptr
      000259 F0               [24] 1397 	movx	@dptr,a
      00025A 80 25            [24] 1398 	sjmp	00109$
      00025C                       1399 00108$:
                                   1400 ;	application.c:124: } else if (inputs.encoder_value.current_val < 0) {
      00025C EF               [12] 1401 	mov	a,r7
      00025D 30 E7 21         [24] 1402 	jnb	acc.7,00109$
                                   1403 ;	application.c:125: encoder_count_set(STEP_CONTROL_PAGE_OPTIONS_NUM-1);
      000260 90 00 04         [24] 1404 	mov	dptr,#0x0004
      000263 12r00r00         [24] 1405 	lcall	_encoder_count_set
                                   1406 ;	application.c:126: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      000266 90r00r25         [24] 1407 	mov	dptr,#(_inputs + 0x000e)
      000269 E0               [24] 1408 	movx	a,@dptr
      00026A FE               [12] 1409 	mov	r6,a
      00026B A3               [24] 1410 	inc	dptr
      00026C E0               [24] 1411 	movx	a,@dptr
      00026D FF               [12] 1412 	mov	r7,a
      00026E 8E 82            [24] 1413 	mov	dpl,r6
      000270 8F 83            [24] 1414 	mov	dph,r7
      000272 12r00r00         [24] 1415 	lcall	__sdcc_call_dptr
      000275 AE 82            [24] 1416 	mov	r6,dpl
      000277 AF 83            [24] 1417 	mov	r7,dph
      000279 90r00r23         [24] 1418 	mov	dptr,#(_inputs + 0x000c)
      00027C EE               [12] 1419 	mov	a,r6
      00027D F0               [24] 1420 	movx	@dptr,a
      00027E EF               [12] 1421 	mov	a,r7
      00027F A3               [24] 1422 	inc	dptr
      000280 F0               [24] 1423 	movx	@dptr,a
      000281                       1424 00109$:
                                   1425 ;	application.c:130: if (inputs.button1.current_val == BUTTON_PRESSED) {
      000281 90r00r17         [24] 1426 	mov	dptr,#_inputs
      000284 E0               [24] 1427 	movx	a,@dptr
      000285 FF               [12] 1428 	mov	r7,a
      000286 BF 01 23         [24] 1429 	cjne	r7,#0x01,00113$
                                   1430 ;	application.c:131: if(!get_stepper_state()){
      000289 12r00r00         [24] 1431 	lcall	_get_stepper_state
      00028C 40 1E            [24] 1432 	jc	00113$
                                   1433 ;	application.c:132: stepper_motor_move(&stepper_movement);
      00028E 90r00r27         [24] 1434 	mov	dptr,#_stepper_movement
      000291 75 F0 00         [24] 1435 	mov	b,#0x00
      000294 12r00r00         [24] 1436 	lcall	_stepper_motor_move
                                   1437 ;	application.c:133: printf("Runing Stepper Motor!\n");
      000297 74rE0            [12] 1438 	mov	a,#___str_0
      000299 C0 E0            [24] 1439 	push	acc
      00029B 74s01            [12] 1440 	mov	a,#(___str_0 >> 8)
      00029D C0 E0            [24] 1441 	push	acc
      00029F 74 80            [12] 1442 	mov	a,#0x80
      0002A1 C0 E0            [24] 1443 	push	acc
      0002A3 12r00r00         [24] 1444 	lcall	_printf
      0002A6 15 81            [12] 1445 	dec	sp
      0002A8 15 81            [12] 1446 	dec	sp
      0002AA 15 81            [12] 1447 	dec	sp
      0002AC                       1448 00113$:
                                   1449 ;	application.c:138: if(inputs.encoder_button.current_val == BUTTON_PRESSED) {
      0002AC 90r00r1D         [24] 1450 	mov	dptr,#(_inputs + 0x0006)
      0002AF E0               [24] 1451 	movx	a,@dptr
      0002B0 FF               [12] 1452 	mov	r7,a
      0002B1 BF 01 02         [24] 1453 	cjne	r7,#0x01,00188$
      0002B4 80 03            [24] 1454 	sjmp	00189$
      0002B6                       1455 00188$:
      0002B6 02r03r59         [24] 1456 	ljmp	00123$
      0002B9                       1457 00189$:
                                   1458 ;	application.c:139: switch(inputs.encoder_value.current_val) {
      0002B9 90r00r23         [24] 1459 	mov	dptr,#(_inputs + 0x000c)
      0002BC E0               [24] 1460 	movx	a,@dptr
      0002BD FE               [12] 1461 	mov	r6,a
      0002BE A3               [24] 1462 	inc	dptr
      0002BF E0               [24] 1463 	movx	a,@dptr
      0002C0 FF               [12] 1464 	mov	r7,a
      0002C1 BE 00 05         [24] 1465 	cjne	r6,#0x00,00190$
      0002C4 BF 00 02         [24] 1466 	cjne	r7,#0x00,00190$
      0002C7 80 23            [24] 1467 	sjmp	00114$
      0002C9                       1468 00190$:
      0002C9 BE 01 05         [24] 1469 	cjne	r6,#0x01,00191$
      0002CC BF 00 02         [24] 1470 	cjne	r7,#0x00,00191$
      0002CF 80 30            [24] 1471 	sjmp	00115$
      0002D1                       1472 00191$:
      0002D1 BE 02 05         [24] 1473 	cjne	r6,#0x02,00192$
      0002D4 BF 00 02         [24] 1474 	cjne	r7,#0x00,00192$
      0002D7 80 3C            [24] 1475 	sjmp	00116$
      0002D9                       1476 00192$:
      0002D9 BE 03 05         [24] 1477 	cjne	r6,#0x03,00193$
      0002DC BF 00 02         [24] 1478 	cjne	r7,#0x00,00193$
      0002DF 80 49            [24] 1479 	sjmp	00117$
      0002E1                       1480 00193$:
      0002E1 BE 04 05         [24] 1481 	cjne	r6,#0x04,00194$
      0002E4 BF 00 02         [24] 1482 	cjne	r7,#0x00,00194$
      0002E7 80 4D            [24] 1483 	sjmp	00118$
      0002E9                       1484 00194$:
      0002E9 02r03r59         [24] 1485 	ljmp	00123$
                                   1486 ;	application.c:140: case 0:
      0002EC                       1487 00114$:
                                   1488 ;	application.c:141: current_page = STEP_CONTROL_SET_FREQUENCY_OPTION;
      0002EC 90r00r00         [24] 1489 	mov	dptr,#_current_page
      0002EF 74 05            [12] 1490 	mov	a,#0x05
      0002F1 F0               [24] 1491 	movx	@dptr,a
                                   1492 ;	application.c:142: encoder_count_set(stepper_movement.frequency);
      0002F2 90r00r2A         [24] 1493 	mov	dptr,#(_stepper_movement + 0x0003)
      0002F5 E0               [24] 1494 	movx	a,@dptr
      0002F6 FE               [12] 1495 	mov	r6,a
      0002F7 A3               [24] 1496 	inc	dptr
      0002F8 E0               [24] 1497 	movx	a,@dptr
      0002F9 FF               [12] 1498 	mov	r7,a
      0002FA 8E 82            [24] 1499 	mov	dpl,r6
      0002FC 8F 83            [24] 1500 	mov	dph,r7
                                   1501 ;	application.c:143: return;
                                   1502 ;	application.c:145: case 1:
      0002FE 02r00r00         [24] 1503 	ljmp	_encoder_count_set
      000301                       1504 00115$:
                                   1505 ;	application.c:146: current_page = STEP_CONTROL_SET_MICROSTEPPING_OPTION;
      000301 90r00r00         [24] 1506 	mov	dptr,#_current_page
      000304 74 06            [12] 1507 	mov	a,#0x06
      000306 F0               [24] 1508 	movx	@dptr,a
                                   1509 ;	application.c:147: encoder_count_set(stepper_movement.microstepping_value);
      000307 90r00r29         [24] 1510 	mov	dptr,#(_stepper_movement + 0x0002)
      00030A E0               [24] 1511 	movx	a,@dptr
      00030B FF               [12] 1512 	mov	r7,a
      00030C 7E 00            [12] 1513 	mov	r6,#0x00
      00030E 8F 82            [24] 1514 	mov	dpl,r7
      000310 8E 83            [24] 1515 	mov	dph,r6
                                   1516 ;	application.c:148: return;
                                   1517 ;	application.c:150: case 2:
      000312 02r00r00         [24] 1518 	ljmp	_encoder_count_set
      000315                       1519 00116$:
                                   1520 ;	application.c:151: current_page = STEP_CONTROL_SET_STEPS_OPTION;
      000315 90r00r00         [24] 1521 	mov	dptr,#_current_page
      000318 74 07            [12] 1522 	mov	a,#0x07
      00031A F0               [24] 1523 	movx	@dptr,a
                                   1524 ;	application.c:152: encoder_count_set(stepper_movement.steps);
      00031B 90r00r2E         [24] 1525 	mov	dptr,#(_stepper_movement + 0x0007)
      00031E E0               [24] 1526 	movx	a,@dptr
      00031F FE               [12] 1527 	mov	r6,a
      000320 A3               [24] 1528 	inc	dptr
      000321 E0               [24] 1529 	movx	a,@dptr
      000322 FF               [12] 1530 	mov	r7,a
      000323 8E 82            [24] 1531 	mov	dpl,r6
      000325 8F 83            [24] 1532 	mov	dph,r7
                                   1533 ;	application.c:153: return;
                                   1534 ;	application.c:155: case 3:  // Go Back Option
      000327 02r00r00         [24] 1535 	ljmp	_encoder_count_set
      00032A                       1536 00117$:
                                   1537 ;	application.c:156: current_page = MENU_PAGE;
      00032A 90r00r00         [24] 1538 	mov	dptr,#_current_page
      00032D 74 01            [12] 1539 	mov	a,#0x01
      00032F F0               [24] 1540 	movx	@dptr,a
                                   1541 ;	application.c:157: display_menu_page(NOTHING_SELECTED);
      000330 75 82 03         [24] 1542 	mov	dpl,#0x03
                                   1543 ;	application.c:158: return;
                                   1544 ;	application.c:160: case 4:
      000333 02r00r00         [24] 1545 	ljmp	_display_menu_page
      000336                       1546 00118$:
                                   1547 ;	application.c:162: if(!get_stepper_state()){
      000336 12r00r00         [24] 1548 	lcall	_get_stepper_state
      000339 40 1E            [24] 1549 	jc	00123$
                                   1550 ;	application.c:163: stepper_motor_move(&stepper_movement);
      00033B 90r00r27         [24] 1551 	mov	dptr,#_stepper_movement
      00033E 75 F0 00         [24] 1552 	mov	b,#0x00
      000341 12r00r00         [24] 1553 	lcall	_stepper_motor_move
                                   1554 ;	application.c:164: printf("Runing Stepper Motor!\n");
      000344 74rE0            [12] 1555 	mov	a,#___str_0
      000346 C0 E0            [24] 1556 	push	acc
      000348 74s01            [12] 1557 	mov	a,#(___str_0 >> 8)
      00034A C0 E0            [24] 1558 	push	acc
      00034C 74 80            [12] 1559 	mov	a,#0x80
      00034E C0 E0            [24] 1560 	push	acc
      000350 12r00r00         [24] 1561 	lcall	_printf
      000353 15 81            [12] 1562 	dec	sp
      000355 15 81            [12] 1563 	dec	sp
      000357 15 81            [12] 1564 	dec	sp
                                   1565 ;	application.c:167: }
      000359                       1566 00123$:
                                   1567 ;	application.c:171: display_step_control_page(inputs.encoder_value.current_val);
      000359 90r00r23         [24] 1568 	mov	dptr,#(_inputs + 0x000c)
      00035C E0               [24] 1569 	movx	a,@dptr
      00035D F5 82            [12] 1570 	mov	dpl,a
                                   1571 ;	application.c:173: }
      00035F 02r00r00         [24] 1572 	ljmp	_display_step_control_page
                                   1573 ;------------------------------------------------------------
                                   1574 ;Allocation info for local variables in function 'application_process_step_control_set_frequency'
                                   1575 ;------------------------------------------------------------
                                   1576 ;	application.c:175: void application_process_step_control_set_frequency(void) {
                                   1577 ;	-----------------------------------------
                                   1578 ;	 function application_process_step_control_set_frequency
                                   1579 ;	-----------------------------------------
      000362                       1580 _application_process_step_control_set_frequency:
                                   1581 ;	application.c:177: inputs.encoder_button.current_val = inputs.encoder_button.get_func();
      000362 90r00r1E         [24] 1582 	mov	dptr,#(_inputs + 0x0007)
      000365 E0               [24] 1583 	movx	a,@dptr
      000366 FE               [12] 1584 	mov	r6,a
      000367 A3               [24] 1585 	inc	dptr
      000368 E0               [24] 1586 	movx	a,@dptr
      000369 FF               [12] 1587 	mov	r7,a
      00036A C0 07            [24] 1588 	push	ar7
      00036C 8E 82            [24] 1589 	mov	dpl,r6
      00036E 8F 83            [24] 1590 	mov	dph,r7
      000370 12r00r00         [24] 1591 	lcall	__sdcc_call_dptr
      000373 AE 82            [24] 1592 	mov	r6,dpl
      000375 D0 07            [24] 1593 	pop	ar7
      000377 90r00r1D         [24] 1594 	mov	dptr,#(_inputs + 0x0006)
      00037A EE               [12] 1595 	mov	a,r6
      00037B F0               [24] 1596 	movx	@dptr,a
                                   1597 ;	application.c:178: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      00037C 90r00r25         [24] 1598 	mov	dptr,#(_inputs + 0x000e)
      00037F E0               [24] 1599 	movx	a,@dptr
      000380 FE               [12] 1600 	mov	r6,a
      000381 A3               [24] 1601 	inc	dptr
      000382 E0               [24] 1602 	movx	a,@dptr
      000383 FF               [12] 1603 	mov	r7,a
      000384 8E 82            [24] 1604 	mov	dpl,r6
      000386 8F 83            [24] 1605 	mov	dph,r7
      000388 12r00r00         [24] 1606 	lcall	__sdcc_call_dptr
      00038B AE 82            [24] 1607 	mov	r6,dpl
      00038D AF 83            [24] 1608 	mov	r7,dph
      00038F 90r00r23         [24] 1609 	mov	dptr,#(_inputs + 0x000c)
      000392 EE               [12] 1610 	mov	a,r6
      000393 F0               [24] 1611 	movx	@dptr,a
      000394 EF               [12] 1612 	mov	a,r7
      000395 A3               [24] 1613 	inc	dptr
      000396 F0               [24] 1614 	movx	@dptr,a
                                   1615 ;	application.c:181: if(inputs.encoder_value.current_val < 0) { 
      000397 90r00r23         [24] 1616 	mov	dptr,#(_inputs + 0x000c)
      00039A E0               [24] 1617 	movx	a,@dptr
      00039B A3               [24] 1618 	inc	dptr
      00039C E0               [24] 1619 	movx	a,@dptr
      00039D 30 E7 07         [24] 1620 	jnb	acc.7,00102$
                                   1621 ;	application.c:182: inputs.encoder_value.current_val = 0; 
      0003A0 90r00r23         [24] 1622 	mov	dptr,#(_inputs + 0x000c)
      0003A3 E4               [12] 1623 	clr	a
      0003A4 F0               [24] 1624 	movx	@dptr,a
      0003A5 A3               [24] 1625 	inc	dptr
      0003A6 F0               [24] 1626 	movx	@dptr,a
      0003A7                       1627 00102$:
                                   1628 ;	application.c:184: if(inputs.encoder_button.current_val == BUTTON_PRESSED) {
      0003A7 90r00r1D         [24] 1629 	mov	dptr,#(_inputs + 0x0006)
      0003AA E0               [24] 1630 	movx	a,@dptr
      0003AB FF               [12] 1631 	mov	r7,a
      0003AC BF 01 27         [24] 1632 	cjne	r7,#0x01,00104$
                                   1633 ;	application.c:186: stepper_movement.frequency = inputs.encoder_value.current_val;
      0003AF 90r00r23         [24] 1634 	mov	dptr,#(_inputs + 0x000c)
      0003B2 E0               [24] 1635 	movx	a,@dptr
      0003B3 FE               [12] 1636 	mov	r6,a
      0003B4 A3               [24] 1637 	inc	dptr
      0003B5 E0               [24] 1638 	movx	a,@dptr
      0003B6 FF               [12] 1639 	mov	r7,a
      0003B7 33               [12] 1640 	rlc	a
      0003B8 95 E0            [12] 1641 	subb	a,acc
      0003BA FD               [12] 1642 	mov	r5,a
      0003BB FC               [12] 1643 	mov	r4,a
      0003BC 90r00r2A         [24] 1644 	mov	dptr,#(_stepper_movement + 0x0003)
      0003BF EE               [12] 1645 	mov	a,r6
      0003C0 F0               [24] 1646 	movx	@dptr,a
      0003C1 EF               [12] 1647 	mov	a,r7
      0003C2 A3               [24] 1648 	inc	dptr
      0003C3 F0               [24] 1649 	movx	@dptr,a
      0003C4 ED               [12] 1650 	mov	a,r5
      0003C5 A3               [24] 1651 	inc	dptr
      0003C6 F0               [24] 1652 	movx	@dptr,a
      0003C7 EC               [12] 1653 	mov	a,r4
      0003C8 A3               [24] 1654 	inc	dptr
      0003C9 F0               [24] 1655 	movx	@dptr,a
                                   1656 ;	application.c:189: current_page = STEP_CONTROL_PAGE;
      0003CA 90r00r00         [24] 1657 	mov	dptr,#_current_page
      0003CD 74 02            [12] 1658 	mov	a,#0x02
      0003CF F0               [24] 1659 	movx	@dptr,a
                                   1660 ;	application.c:190: encoder_count_reset();
      0003D0 12r00r00         [24] 1661 	lcall	_encoder_count_reset
                                   1662 ;	application.c:191: display_step_control_page_first_time();
                                   1663 ;	application.c:193: return;
      0003D3 02r00r00         [24] 1664 	ljmp	_display_step_control_page_first_time
      0003D6                       1665 00104$:
                                   1666 ;	application.c:198: display_step_control_set_frequency_option(inputs.encoder_value.current_val);
      0003D6 90r00r23         [24] 1667 	mov	dptr,#(_inputs + 0x000c)
      0003D9 E0               [24] 1668 	movx	a,@dptr
      0003DA FE               [12] 1669 	mov	r6,a
      0003DB A3               [24] 1670 	inc	dptr
      0003DC E0               [24] 1671 	movx	a,@dptr
      0003DD FF               [12] 1672 	mov	r7,a
      0003DE 8E 82            [24] 1673 	mov	dpl,r6
      0003E0 8F 83            [24] 1674 	mov	dph,r7
                                   1675 ;	application.c:199: }
      0003E2 02r00r00         [24] 1676 	ljmp	_display_step_control_set_frequency_option
                                   1677 ;------------------------------------------------------------
                                   1678 ;Allocation info for local variables in function 'application_process_step_control_set_microstepping'
                                   1679 ;------------------------------------------------------------
                                   1680 ;	application.c:200: void application_process_step_control_set_microstepping(void) {
                                   1681 ;	-----------------------------------------
                                   1682 ;	 function application_process_step_control_set_microstepping
                                   1683 ;	-----------------------------------------
      0003E5                       1684 _application_process_step_control_set_microstepping:
                                   1685 ;	application.c:202: inputs.encoder_button.current_val = inputs.encoder_button.get_func();
      0003E5 90r00r1E         [24] 1686 	mov	dptr,#(_inputs + 0x0007)
      0003E8 E0               [24] 1687 	movx	a,@dptr
      0003E9 FE               [12] 1688 	mov	r6,a
      0003EA A3               [24] 1689 	inc	dptr
      0003EB E0               [24] 1690 	movx	a,@dptr
      0003EC FF               [12] 1691 	mov	r7,a
      0003ED C0 07            [24] 1692 	push	ar7
      0003EF 8E 82            [24] 1693 	mov	dpl,r6
      0003F1 8F 83            [24] 1694 	mov	dph,r7
      0003F3 12r00r00         [24] 1695 	lcall	__sdcc_call_dptr
      0003F6 AE 82            [24] 1696 	mov	r6,dpl
      0003F8 D0 07            [24] 1697 	pop	ar7
      0003FA 90r00r1D         [24] 1698 	mov	dptr,#(_inputs + 0x0006)
      0003FD EE               [12] 1699 	mov	a,r6
      0003FE F0               [24] 1700 	movx	@dptr,a
                                   1701 ;	application.c:203: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      0003FF 90r00r25         [24] 1702 	mov	dptr,#(_inputs + 0x000e)
      000402 E0               [24] 1703 	movx	a,@dptr
      000403 FE               [12] 1704 	mov	r6,a
      000404 A3               [24] 1705 	inc	dptr
      000405 E0               [24] 1706 	movx	a,@dptr
      000406 FF               [12] 1707 	mov	r7,a
      000407 8E 82            [24] 1708 	mov	dpl,r6
      000409 8F 83            [24] 1709 	mov	dph,r7
      00040B 12r00r00         [24] 1710 	lcall	__sdcc_call_dptr
      00040E AE 82            [24] 1711 	mov	r6,dpl
      000410 AF 83            [24] 1712 	mov	r7,dph
      000412 90r00r23         [24] 1713 	mov	dptr,#(_inputs + 0x000c)
      000415 EE               [12] 1714 	mov	a,r6
      000416 F0               [24] 1715 	movx	@dptr,a
      000417 EF               [12] 1716 	mov	a,r7
      000418 A3               [24] 1717 	inc	dptr
      000419 F0               [24] 1718 	movx	@dptr,a
                                   1719 ;	application.c:206: if(inputs.encoder_value.current_val < 0) { 
      00041A 90r00r23         [24] 1720 	mov	dptr,#(_inputs + 0x000c)
      00041D E0               [24] 1721 	movx	a,@dptr
      00041E A3               [24] 1722 	inc	dptr
      00041F E0               [24] 1723 	movx	a,@dptr
      000420 30 E7 07         [24] 1724 	jnb	acc.7,00102$
                                   1725 ;	application.c:207: inputs.encoder_value.current_val = 0; 
      000423 90r00r23         [24] 1726 	mov	dptr,#(_inputs + 0x000c)
      000426 E4               [12] 1727 	clr	a
      000427 F0               [24] 1728 	movx	@dptr,a
      000428 A3               [24] 1729 	inc	dptr
      000429 F0               [24] 1730 	movx	@dptr,a
      00042A                       1731 00102$:
                                   1732 ;	application.c:209: if(inputs.encoder_button.current_val == BUTTON_PRESSED) {
      00042A 90r00r1D         [24] 1733 	mov	dptr,#(_inputs + 0x0006)
      00042D E0               [24] 1734 	movx	a,@dptr
      00042E FF               [12] 1735 	mov	r7,a
      00042F BF 01 0C         [24] 1736 	cjne	r7,#0x01,00104$
                                   1737 ;	application.c:215: current_page = STEP_CONTROL_PAGE;
      000432 90r00r00         [24] 1738 	mov	dptr,#_current_page
      000435 74 02            [12] 1739 	mov	a,#0x02
      000437 F0               [24] 1740 	movx	@dptr,a
                                   1741 ;	application.c:216: encoder_count_reset();
      000438 12r00r00         [24] 1742 	lcall	_encoder_count_reset
                                   1743 ;	application.c:217: display_step_control_page_first_time();
                                   1744 ;	application.c:219: return;
      00043B 02r00r00         [24] 1745 	ljmp	_display_step_control_page_first_time
      00043E                       1746 00104$:
                                   1747 ;	application.c:224: display_step_control_set_microstepping_option(inputs.encoder_value.current_val);
      00043E 90r00r23         [24] 1748 	mov	dptr,#(_inputs + 0x000c)
      000441 E0               [24] 1749 	movx	a,@dptr
      000442 FE               [12] 1750 	mov	r6,a
      000443 A3               [24] 1751 	inc	dptr
      000444 E0               [24] 1752 	movx	a,@dptr
      000445 FF               [12] 1753 	mov	r7,a
      000446 8E 82            [24] 1754 	mov	dpl,r6
      000448 8F 83            [24] 1755 	mov	dph,r7
                                   1756 ;	application.c:225: }
      00044A 02r00r00         [24] 1757 	ljmp	_display_step_control_set_microstepping_option
                                   1758 ;------------------------------------------------------------
                                   1759 ;Allocation info for local variables in function 'application_process_step_control_set_steps'
                                   1760 ;------------------------------------------------------------
                                   1761 ;	application.c:226: void application_process_step_control_set_steps(void) {
                                   1762 ;	-----------------------------------------
                                   1763 ;	 function application_process_step_control_set_steps
                                   1764 ;	-----------------------------------------
      00044D                       1765 _application_process_step_control_set_steps:
                                   1766 ;	application.c:229: inputs.encoder_button.current_val = inputs.encoder_button.get_func();
      00044D 90r00r1E         [24] 1767 	mov	dptr,#(_inputs + 0x0007)
      000450 E0               [24] 1768 	movx	a,@dptr
      000451 FE               [12] 1769 	mov	r6,a
      000452 A3               [24] 1770 	inc	dptr
      000453 E0               [24] 1771 	movx	a,@dptr
      000454 FF               [12] 1772 	mov	r7,a
      000455 C0 07            [24] 1773 	push	ar7
      000457 8E 82            [24] 1774 	mov	dpl,r6
      000459 8F 83            [24] 1775 	mov	dph,r7
      00045B 12r00r00         [24] 1776 	lcall	__sdcc_call_dptr
      00045E AE 82            [24] 1777 	mov	r6,dpl
      000460 D0 07            [24] 1778 	pop	ar7
      000462 90r00r1D         [24] 1779 	mov	dptr,#(_inputs + 0x0006)
      000465 EE               [12] 1780 	mov	a,r6
      000466 F0               [24] 1781 	movx	@dptr,a
                                   1782 ;	application.c:230: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      000467 90r00r25         [24] 1783 	mov	dptr,#(_inputs + 0x000e)
      00046A E0               [24] 1784 	movx	a,@dptr
      00046B FE               [12] 1785 	mov	r6,a
      00046C A3               [24] 1786 	inc	dptr
      00046D E0               [24] 1787 	movx	a,@dptr
      00046E FF               [12] 1788 	mov	r7,a
      00046F 8E 82            [24] 1789 	mov	dpl,r6
      000471 8F 83            [24] 1790 	mov	dph,r7
      000473 12r00r00         [24] 1791 	lcall	__sdcc_call_dptr
      000476 AE 82            [24] 1792 	mov	r6,dpl
      000478 AF 83            [24] 1793 	mov	r7,dph
      00047A 90r00r23         [24] 1794 	mov	dptr,#(_inputs + 0x000c)
      00047D EE               [12] 1795 	mov	a,r6
      00047E F0               [24] 1796 	movx	@dptr,a
      00047F EF               [12] 1797 	mov	a,r7
      000480 A3               [24] 1798 	inc	dptr
      000481 F0               [24] 1799 	movx	@dptr,a
                                   1800 ;	application.c:234: if(inputs.encoder_value.current_val < 0) { 
      000482 90r00r23         [24] 1801 	mov	dptr,#(_inputs + 0x000c)
      000485 E0               [24] 1802 	movx	a,@dptr
      000486 FE               [12] 1803 	mov	r6,a
      000487 A3               [24] 1804 	inc	dptr
      000488 E0               [24] 1805 	movx	a,@dptr
      000489 FF               [12] 1806 	mov	r7,a
      00048A 30 E7 23         [24] 1807 	jnb	acc.7,00104$
                                   1808 ;	application.c:235: encoder_count_set(9);
      00048D 90 00 09         [24] 1809 	mov	dptr,#0x0009
      000490 12r00r00         [24] 1810 	lcall	_encoder_count_set
                                   1811 ;	application.c:236: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      000493 90r00r25         [24] 1812 	mov	dptr,#(_inputs + 0x000e)
      000496 E0               [24] 1813 	movx	a,@dptr
      000497 FC               [12] 1814 	mov	r4,a
      000498 A3               [24] 1815 	inc	dptr
      000499 E0               [24] 1816 	movx	a,@dptr
      00049A FD               [12] 1817 	mov	r5,a
      00049B 8C 82            [24] 1818 	mov	dpl,r4
      00049D 8D 83            [24] 1819 	mov	dph,r5
      00049F 12r00r00         [24] 1820 	lcall	__sdcc_call_dptr
      0004A2 AC 82            [24] 1821 	mov	r4,dpl
      0004A4 AD 83            [24] 1822 	mov	r5,dph
      0004A6 90r00r23         [24] 1823 	mov	dptr,#(_inputs + 0x000c)
      0004A9 EC               [12] 1824 	mov	a,r4
      0004AA F0               [24] 1825 	movx	@dptr,a
      0004AB ED               [12] 1826 	mov	a,r5
      0004AC A3               [24] 1827 	inc	dptr
      0004AD F0               [24] 1828 	movx	@dptr,a
      0004AE 80 29            [24] 1829 	sjmp	00105$
      0004B0                       1830 00104$:
                                   1831 ;	application.c:237: } else if (inputs.encoder_value.current_val >= 10) {
      0004B0 C3               [12] 1832 	clr	c
      0004B1 EE               [12] 1833 	mov	a,r6
      0004B2 94 0A            [12] 1834 	subb	a,#0x0a
      0004B4 EF               [12] 1835 	mov	a,r7
      0004B5 64 80            [12] 1836 	xrl	a,#0x80
      0004B7 94 80            [12] 1837 	subb	a,#0x80
      0004B9 40 1E            [24] 1838 	jc	00105$
                                   1839 ;	application.c:238: encoder_count_reset();
      0004BB 12r00r00         [24] 1840 	lcall	_encoder_count_reset
                                   1841 ;	application.c:239: inputs.encoder_value.current_val = inputs.encoder_value.get_func();
      0004BE 90r00r25         [24] 1842 	mov	dptr,#(_inputs + 0x000e)
      0004C1 E0               [24] 1843 	movx	a,@dptr
      0004C2 FE               [12] 1844 	mov	r6,a
      0004C3 A3               [24] 1845 	inc	dptr
      0004C4 E0               [24] 1846 	movx	a,@dptr
      0004C5 FF               [12] 1847 	mov	r7,a
      0004C6 8E 82            [24] 1848 	mov	dpl,r6
      0004C8 8F 83            [24] 1849 	mov	dph,r7
      0004CA 12r00r00         [24] 1850 	lcall	__sdcc_call_dptr
      0004CD AE 82            [24] 1851 	mov	r6,dpl
      0004CF AF 83            [24] 1852 	mov	r7,dph
      0004D1 90r00r23         [24] 1853 	mov	dptr,#(_inputs + 0x000c)
      0004D4 EE               [12] 1854 	mov	a,r6
      0004D5 F0               [24] 1855 	movx	@dptr,a
      0004D6 EF               [12] 1856 	mov	a,r7
      0004D7 A3               [24] 1857 	inc	dptr
      0004D8 F0               [24] 1858 	movx	@dptr,a
      0004D9                       1859 00105$:
                                   1860 ;	application.c:241: float_digits[float_digit_pointer] = inputs.encoder_value.current_val;
      0004D9 90r00r11         [24] 1861 	mov	dptr,#_float_digit_pointer
      0004DC E0               [24] 1862 	movx	a,@dptr
      0004DD 24r12            [12] 1863 	add	a,#_float_digits
      0004DF FF               [12] 1864 	mov	r7,a
      0004E0 E4               [12] 1865 	clr	a
      0004E1 34s00            [12] 1866 	addc	a,#(_float_digits >> 8)
      0004E3 FE               [12] 1867 	mov	r6,a
      0004E4 90r00r23         [24] 1868 	mov	dptr,#(_inputs + 0x000c)
      0004E7 E0               [24] 1869 	movx	a,@dptr
      0004E8 8F 82            [24] 1870 	mov	dpl,r7
      0004EA 8E 83            [24] 1871 	mov	dph,r6
      0004EC F0               [24] 1872 	movx	@dptr,a
                                   1873 ;	application.c:244: if(inputs.encoder_button.current_val == BUTTON_PRESSED) {
      0004ED 90r00r1D         [24] 1874 	mov	dptr,#(_inputs + 0x0006)
      0004F0 E0               [24] 1875 	movx	a,@dptr
      0004F1 FF               [12] 1876 	mov	r7,a
      0004F2 BF 01 3A         [24] 1877 	cjne	r7,#0x01,00109$
                                   1878 ;	application.c:246: encoder_count_reset();
      0004F5 12r00r00         [24] 1879 	lcall	_encoder_count_reset
                                   1880 ;	application.c:247: if(float_digit_pointer >= FLOAT_POINTER_MAX) {
      0004F8 90r00r11         [24] 1881 	mov	dptr,#_float_digit_pointer
      0004FB E0               [24] 1882 	movx	a,@dptr
      0004FC FF               [12] 1883 	mov	r7,a
      0004FD BF 04 00         [24] 1884 	cjne	r7,#0x04,00132$
      000500                       1885 00132$:
      000500 40 27            [24] 1886 	jc	00107$
                                   1887 ;	application.c:249: float_digit_pointer = 0;
      000502 90r00r11         [24] 1888 	mov	dptr,#_float_digit_pointer
      000505 E4               [12] 1889 	clr	a
      000506 F0               [24] 1890 	movx	@dptr,a
                                   1891 ;	application.c:252: stepper_set_steps_from_float_digits(&stepper_movement, float_digits);
      000507 90r00r00         [24] 1892 	mov	dptr,#_stepper_set_steps_from_float_digits_PARM_2
      00050A 74r12            [12] 1893 	mov	a,#_float_digits
      00050C F0               [24] 1894 	movx	@dptr,a
      00050D 74s00            [12] 1895 	mov	a,#(_float_digits >> 8)
      00050F A3               [24] 1896 	inc	dptr
      000510 F0               [24] 1897 	movx	@dptr,a
      000511 E4               [12] 1898 	clr	a
      000512 A3               [24] 1899 	inc	dptr
      000513 F0               [24] 1900 	movx	@dptr,a
      000514 90r00r27         [24] 1901 	mov	dptr,#_stepper_movement
      000517 75 F0 00         [24] 1902 	mov	b,#0x00
      00051A 12r00r00         [24] 1903 	lcall	_stepper_set_steps_from_float_digits
                                   1904 ;	application.c:255: current_page = STEP_CONTROL_PAGE;
      00051D 90r00r00         [24] 1905 	mov	dptr,#_current_page
      000520 74 02            [12] 1906 	mov	a,#0x02
      000522 F0               [24] 1907 	movx	@dptr,a
                                   1908 ;	application.c:256: encoder_count_reset();
      000523 12r00r00         [24] 1909 	lcall	_encoder_count_reset
                                   1910 ;	application.c:257: display_step_control_page_first_time();
                                   1911 ;	application.c:259: return;
      000526 02r00r00         [24] 1912 	ljmp	_display_step_control_page_first_time
      000529                       1913 00107$:
                                   1914 ;	application.c:261: float_digit_pointer++;
      000529 90r00r11         [24] 1915 	mov	dptr,#_float_digit_pointer
      00052C EF               [12] 1916 	mov	a,r7
      00052D 04               [12] 1917 	inc	a
      00052E F0               [24] 1918 	movx	@dptr,a
      00052F                       1919 00109$:
                                   1920 ;	application.c:265: display_step_control_set_steps_option(float_digits, float_digit_pointer);
      00052F 90r00r11         [24] 1921 	mov	dptr,#_float_digit_pointer
      000532 E0               [24] 1922 	movx	a,@dptr
      000533 90r00r00         [24] 1923 	mov	dptr,#_display_step_control_set_steps_option_PARM_2
      000536 F0               [24] 1924 	movx	@dptr,a
      000537 90r00r12         [24] 1925 	mov	dptr,#_float_digits
      00053A 75 F0 00         [24] 1926 	mov	b,#0x00
                                   1927 ;	application.c:267: }
      00053D 02r00r00         [24] 1928 	ljmp	_display_step_control_set_steps_option
                                   1929 ;------------------------------------------------------------
                                   1930 ;Allocation info for local variables in function 'application_process_distance_control_page'
                                   1931 ;------------------------------------------------------------
                                   1932 ;	application.c:269: void application_process_distance_control_page(void) {
                                   1933 ;	-----------------------------------------
                                   1934 ;	 function application_process_distance_control_page
                                   1935 ;	-----------------------------------------
      000540                       1936 _application_process_distance_control_page:
                                   1937 ;	application.c:271: printf("distance control page not implemented!\n");
      000540 74rF7            [12] 1938 	mov	a,#___str_1
      000542 C0 E0            [24] 1939 	push	acc
      000544 74s01            [12] 1940 	mov	a,#(___str_1 >> 8)
      000546 C0 E0            [24] 1941 	push	acc
      000548 74 80            [12] 1942 	mov	a,#0x80
      00054A C0 E0            [24] 1943 	push	acc
      00054C 12r00r00         [24] 1944 	lcall	_printf
      00054F 15 81            [12] 1945 	dec	sp
      000551 15 81            [12] 1946 	dec	sp
      000553 15 81            [12] 1947 	dec	sp
                                   1948 ;	application.c:272: application_process_welcome_page();
                                   1949 ;	application.c:273: }
      000555 02r00r00         [24] 1950 	ljmp	_application_process_welcome_page
                                   1951 ;------------------------------------------------------------
                                   1952 ;Allocation info for local variables in function 'application_process_encoder_control_page'
                                   1953 ;------------------------------------------------------------
                                   1954 ;	application.c:275: void application_process_encoder_control_page(void) {
                                   1955 ;	-----------------------------------------
                                   1956 ;	 function application_process_encoder_control_page
                                   1957 ;	-----------------------------------------
      000558                       1958 _application_process_encoder_control_page:
                                   1959 ;	application.c:276: printf("reached encoder control page not implemented!\n");
      000558 74r1F            [12] 1960 	mov	a,#___str_2
      00055A C0 E0            [24] 1961 	push	acc
      00055C 74s02            [12] 1962 	mov	a,#(___str_2 >> 8)
      00055E C0 E0            [24] 1963 	push	acc
      000560 74 80            [12] 1964 	mov	a,#0x80
      000562 C0 E0            [24] 1965 	push	acc
      000564 12r00r00         [24] 1966 	lcall	_printf
      000567 15 81            [12] 1967 	dec	sp
      000569 15 81            [12] 1968 	dec	sp
      00056B 15 81            [12] 1969 	dec	sp
                                   1970 ;	application.c:277: application_process_welcome_page();
                                   1971 ;	application.c:278: }
      00056D 02r00r00         [24] 1972 	ljmp	_application_process_welcome_page
                                   1973 ;------------------------------------------------------------
                                   1974 ;Allocation info for local variables in function 'application_process_current_page'
                                   1975 ;------------------------------------------------------------
                                   1976 ;	application.c:282: void application_process_current_page(void) { application_process_func[current_page](); }
                                   1977 ;	-----------------------------------------
                                   1978 ;	 function application_process_current_page
                                   1979 ;	-----------------------------------------
      000570                       1980 _application_process_current_page:
      000570 90r00r00         [24] 1981 	mov	dptr,#_current_page
      000573 E0               [24] 1982 	movx	a,@dptr
      000574 75 F0 02         [24] 1983 	mov	b,#0x02
      000577 A4               [48] 1984 	mul	ab
      000578 24r01            [12] 1985 	add	a,#_application_process_func
      00057A F5 82            [12] 1986 	mov	dpl,a
      00057C 74s00            [12] 1987 	mov	a,#(_application_process_func >> 8)
      00057E 35 F0            [12] 1988 	addc	a,b
      000580 F5 83            [12] 1989 	mov	dph,a
      000582 E0               [24] 1990 	movx	a,@dptr
      000583 FE               [12] 1991 	mov	r6,a
      000584 A3               [24] 1992 	inc	dptr
      000585 E0               [24] 1993 	movx	a,@dptr
      000586 FF               [12] 1994 	mov	r7,a
      000587 C0 07            [24] 1995 	push	ar7
      000589 C0 06            [24] 1996 	push	ar6
      00058B 8E 82            [24] 1997 	mov	dpl,r6
      00058D 8F 83            [24] 1998 	mov	dph,r7
      00058F 12r00r00         [24] 1999 	lcall	__sdcc_call_dptr
      000592 D0 06            [24] 2000 	pop	ar6
      000594 D0 07            [24] 2001 	pop	ar7
      000596 22               [24] 2002 	ret
                                   2003 	.area CSEG    (CODE)
                                   2004 	.area CONST   (CODE)
      000000                       2005 _FONTS:
      000000 00                    2006 	.db #0x00	; 0
      000001 00                    2007 	.db #0x00	; 0
      000002 00                    2008 	.db #0x00	; 0
      000003 00                    2009 	.db #0x00	; 0
      000004 00                    2010 	.db #0x00	; 0
      000005 81                    2011 	.db #0x81	; 129
      000006 81                    2012 	.db #0x81	; 129
      000007 18                    2013 	.db #0x18	; 24
      000008 81                    2014 	.db #0x81	; 129
      000009 81                    2015 	.db #0x81	; 129
      00000A 00                    2016 	.db #0x00	; 0
      00000B 07                    2017 	.db #0x07	; 7
      00000C 00                    2018 	.db #0x00	; 0
      00000D 07                    2019 	.db #0x07	; 7
      00000E 00                    2020 	.db #0x00	; 0
      00000F 14                    2021 	.db #0x14	; 20
      000010 7F                    2022 	.db #0x7f	; 127
      000011 14                    2023 	.db #0x14	; 20
      000012 7F                    2024 	.db #0x7f	; 127
      000013 14                    2025 	.db #0x14	; 20
      000014 24                    2026 	.db #0x24	; 36
      000015 2A                    2027 	.db #0x2a	; 42
      000016 7F                    2028 	.db #0x7f	; 127
      000017 2A                    2029 	.db #0x2a	; 42
      000018 12                    2030 	.db #0x12	; 18
      000019 23                    2031 	.db #0x23	; 35
      00001A 13                    2032 	.db #0x13	; 19
      00001B 08                    2033 	.db #0x08	; 8
      00001C 64                    2034 	.db #0x64	; 100	'd'
      00001D 62                    2035 	.db #0x62	; 98	'b'
      00001E 36                    2036 	.db #0x36	; 54	'6'
      00001F 49                    2037 	.db #0x49	; 73	'I'
      000020 55                    2038 	.db #0x55	; 85	'U'
      000021 22                    2039 	.db #0x22	; 34
      000022 50                    2040 	.db #0x50	; 80	'P'
      000023 00                    2041 	.db #0x00	; 0
      000024 05                    2042 	.db #0x05	; 5
      000025 03                    2043 	.db #0x03	; 3
      000026 00                    2044 	.db #0x00	; 0
      000027 00                    2045 	.db #0x00	; 0
      000028 00                    2046 	.db #0x00	; 0
      000029 1C                    2047 	.db #0x1c	; 28
      00002A 22                    2048 	.db #0x22	; 34
      00002B 41                    2049 	.db #0x41	; 65	'A'
      00002C 00                    2050 	.db #0x00	; 0
      00002D 00                    2051 	.db #0x00	; 0
      00002E 41                    2052 	.db #0x41	; 65	'A'
      00002F 22                    2053 	.db #0x22	; 34
      000030 1C                    2054 	.db #0x1c	; 28
      000031 00                    2055 	.db #0x00	; 0
      000032 14                    2056 	.db #0x14	; 20
      000033 08                    2057 	.db #0x08	; 8
      000034 3E                    2058 	.db #0x3e	; 62
      000035 08                    2059 	.db #0x08	; 8
      000036 14                    2060 	.db #0x14	; 20
      000037 08                    2061 	.db #0x08	; 8
      000038 08                    2062 	.db #0x08	; 8
      000039 3E                    2063 	.db #0x3e	; 62
      00003A 08                    2064 	.db #0x08	; 8
      00003B 08                    2065 	.db #0x08	; 8
      00003C 00                    2066 	.db #0x00	; 0
      00003D 50                    2067 	.db #0x50	; 80	'P'
      00003E 30                    2068 	.db #0x30	; 48	'0'
      00003F 00                    2069 	.db #0x00	; 0
      000040 00                    2070 	.db #0x00	; 0
      000041 08                    2071 	.db #0x08	; 8
      000042 08                    2072 	.db #0x08	; 8
      000043 08                    2073 	.db #0x08	; 8
      000044 08                    2074 	.db #0x08	; 8
      000045 08                    2075 	.db #0x08	; 8
      000046 00                    2076 	.db #0x00	; 0
      000047 60                    2077 	.db #0x60	; 96
      000048 60                    2078 	.db #0x60	; 96
      000049 00                    2079 	.db #0x00	; 0
      00004A 00                    2080 	.db #0x00	; 0
      00004B 20                    2081 	.db #0x20	; 32
      00004C 10                    2082 	.db #0x10	; 16
      00004D 08                    2083 	.db #0x08	; 8
      00004E 04                    2084 	.db #0x04	; 4
      00004F 02                    2085 	.db #0x02	; 2
      000050 3E                    2086 	.db #0x3e	; 62
      000051 51                    2087 	.db #0x51	; 81	'Q'
      000052 49                    2088 	.db #0x49	; 73	'I'
      000053 45                    2089 	.db #0x45	; 69	'E'
      000054 3E                    2090 	.db #0x3e	; 62
      000055 00                    2091 	.db #0x00	; 0
      000056 42                    2092 	.db #0x42	; 66	'B'
      000057 7F                    2093 	.db #0x7f	; 127
      000058 40                    2094 	.db #0x40	; 64
      000059 00                    2095 	.db #0x00	; 0
      00005A 42                    2096 	.db #0x42	; 66	'B'
      00005B 61                    2097 	.db #0x61	; 97	'a'
      00005C 51                    2098 	.db #0x51	; 81	'Q'
      00005D 49                    2099 	.db #0x49	; 73	'I'
      00005E 46                    2100 	.db #0x46	; 70	'F'
      00005F 21                    2101 	.db #0x21	; 33
      000060 41                    2102 	.db #0x41	; 65	'A'
      000061 45                    2103 	.db #0x45	; 69	'E'
      000062 4B                    2104 	.db #0x4b	; 75	'K'
      000063 31                    2105 	.db #0x31	; 49	'1'
      000064 18                    2106 	.db #0x18	; 24
      000065 14                    2107 	.db #0x14	; 20
      000066 12                    2108 	.db #0x12	; 18
      000067 7F                    2109 	.db #0x7f	; 127
      000068 10                    2110 	.db #0x10	; 16
      000069 27                    2111 	.db #0x27	; 39
      00006A 45                    2112 	.db #0x45	; 69	'E'
      00006B 45                    2113 	.db #0x45	; 69	'E'
      00006C 45                    2114 	.db #0x45	; 69	'E'
      00006D 39                    2115 	.db #0x39	; 57	'9'
      00006E 3C                    2116 	.db #0x3c	; 60
      00006F 4A                    2117 	.db #0x4a	; 74	'J'
      000070 49                    2118 	.db #0x49	; 73	'I'
      000071 49                    2119 	.db #0x49	; 73	'I'
      000072 30                    2120 	.db #0x30	; 48	'0'
      000073 01                    2121 	.db #0x01	; 1
      000074 71                    2122 	.db #0x71	; 113	'q'
      000075 09                    2123 	.db #0x09	; 9
      000076 05                    2124 	.db #0x05	; 5
      000077 03                    2125 	.db #0x03	; 3
      000078 36                    2126 	.db #0x36	; 54	'6'
      000079 49                    2127 	.db #0x49	; 73	'I'
      00007A 49                    2128 	.db #0x49	; 73	'I'
      00007B 49                    2129 	.db #0x49	; 73	'I'
      00007C 36                    2130 	.db #0x36	; 54	'6'
      00007D 06                    2131 	.db #0x06	; 6
      00007E 49                    2132 	.db #0x49	; 73	'I'
      00007F 49                    2133 	.db #0x49	; 73	'I'
      000080 29                    2134 	.db #0x29	; 41
      000081 1E                    2135 	.db #0x1e	; 30
      000082 00                    2136 	.db #0x00	; 0
      000083 36                    2137 	.db #0x36	; 54	'6'
      000084 36                    2138 	.db #0x36	; 54	'6'
      000085 00                    2139 	.db #0x00	; 0
      000086 00                    2140 	.db #0x00	; 0
      000087 00                    2141 	.db #0x00	; 0
      000088 56                    2142 	.db #0x56	; 86	'V'
      000089 36                    2143 	.db #0x36	; 54	'6'
      00008A 00                    2144 	.db #0x00	; 0
      00008B 00                    2145 	.db #0x00	; 0
      00008C 08                    2146 	.db #0x08	; 8
      00008D 14                    2147 	.db #0x14	; 20
      00008E 22                    2148 	.db #0x22	; 34
      00008F 41                    2149 	.db #0x41	; 65	'A'
      000090 00                    2150 	.db #0x00	; 0
      000091 14                    2151 	.db #0x14	; 20
      000092 14                    2152 	.db #0x14	; 20
      000093 14                    2153 	.db #0x14	; 20
      000094 14                    2154 	.db #0x14	; 20
      000095 14                    2155 	.db #0x14	; 20
      000096 00                    2156 	.db #0x00	; 0
      000097 41                    2157 	.db #0x41	; 65	'A'
      000098 22                    2158 	.db #0x22	; 34
      000099 14                    2159 	.db #0x14	; 20
      00009A 08                    2160 	.db #0x08	; 8
      00009B 02                    2161 	.db #0x02	; 2
      00009C 01                    2162 	.db #0x01	; 1
      00009D 51                    2163 	.db #0x51	; 81	'Q'
      00009E 09                    2164 	.db #0x09	; 9
      00009F 06                    2165 	.db #0x06	; 6
      0000A0 32                    2166 	.db #0x32	; 50	'2'
      0000A1 49                    2167 	.db #0x49	; 73	'I'
      0000A2 79                    2168 	.db #0x79	; 121	'y'
      0000A3 41                    2169 	.db #0x41	; 65	'A'
      0000A4 3E                    2170 	.db #0x3e	; 62
      0000A5 7E                    2171 	.db #0x7e	; 126
      0000A6 11                    2172 	.db #0x11	; 17
      0000A7 11                    2173 	.db #0x11	; 17
      0000A8 11                    2174 	.db #0x11	; 17
      0000A9 7E                    2175 	.db #0x7e	; 126
      0000AA 7F                    2176 	.db #0x7f	; 127
      0000AB 49                    2177 	.db #0x49	; 73	'I'
      0000AC 49                    2178 	.db #0x49	; 73	'I'
      0000AD 49                    2179 	.db #0x49	; 73	'I'
      0000AE 36                    2180 	.db #0x36	; 54	'6'
      0000AF 3E                    2181 	.db #0x3e	; 62
      0000B0 41                    2182 	.db #0x41	; 65	'A'
      0000B1 41                    2183 	.db #0x41	; 65	'A'
      0000B2 41                    2184 	.db #0x41	; 65	'A'
      0000B3 22                    2185 	.db #0x22	; 34
      0000B4 7F                    2186 	.db #0x7f	; 127
      0000B5 41                    2187 	.db #0x41	; 65	'A'
      0000B6 41                    2188 	.db #0x41	; 65	'A'
      0000B7 22                    2189 	.db #0x22	; 34
      0000B8 1C                    2190 	.db #0x1c	; 28
      0000B9 7F                    2191 	.db #0x7f	; 127
      0000BA 49                    2192 	.db #0x49	; 73	'I'
      0000BB 49                    2193 	.db #0x49	; 73	'I'
      0000BC 49                    2194 	.db #0x49	; 73	'I'
      0000BD 41                    2195 	.db #0x41	; 65	'A'
      0000BE 7F                    2196 	.db #0x7f	; 127
      0000BF 09                    2197 	.db #0x09	; 9
      0000C0 09                    2198 	.db #0x09	; 9
      0000C1 09                    2199 	.db #0x09	; 9
      0000C2 01                    2200 	.db #0x01	; 1
      0000C3 3E                    2201 	.db #0x3e	; 62
      0000C4 41                    2202 	.db #0x41	; 65	'A'
      0000C5 49                    2203 	.db #0x49	; 73	'I'
      0000C6 49                    2204 	.db #0x49	; 73	'I'
      0000C7 7A                    2205 	.db #0x7a	; 122	'z'
      0000C8 7F                    2206 	.db #0x7f	; 127
      0000C9 08                    2207 	.db #0x08	; 8
      0000CA 08                    2208 	.db #0x08	; 8
      0000CB 08                    2209 	.db #0x08	; 8
      0000CC 7F                    2210 	.db #0x7f	; 127
      0000CD 00                    2211 	.db #0x00	; 0
      0000CE 41                    2212 	.db #0x41	; 65	'A'
      0000CF 7F                    2213 	.db #0x7f	; 127
      0000D0 41                    2214 	.db #0x41	; 65	'A'
      0000D1 00                    2215 	.db #0x00	; 0
      0000D2 20                    2216 	.db #0x20	; 32
      0000D3 40                    2217 	.db #0x40	; 64
      0000D4 41                    2218 	.db #0x41	; 65	'A'
      0000D5 3F                    2219 	.db #0x3f	; 63
      0000D6 01                    2220 	.db #0x01	; 1
      0000D7 7F                    2221 	.db #0x7f	; 127
      0000D8 08                    2222 	.db #0x08	; 8
      0000D9 14                    2223 	.db #0x14	; 20
      0000DA 22                    2224 	.db #0x22	; 34
      0000DB 41                    2225 	.db #0x41	; 65	'A'
      0000DC 7F                    2226 	.db #0x7f	; 127
      0000DD 40                    2227 	.db #0x40	; 64
      0000DE 40                    2228 	.db #0x40	; 64
      0000DF 40                    2229 	.db #0x40	; 64
      0000E0 40                    2230 	.db #0x40	; 64
      0000E1 7F                    2231 	.db #0x7f	; 127
      0000E2 02                    2232 	.db #0x02	; 2
      0000E3 0C                    2233 	.db #0x0c	; 12
      0000E4 02                    2234 	.db #0x02	; 2
      0000E5 7F                    2235 	.db #0x7f	; 127
      0000E6 7F                    2236 	.db #0x7f	; 127
      0000E7 04                    2237 	.db #0x04	; 4
      0000E8 08                    2238 	.db #0x08	; 8
      0000E9 10                    2239 	.db #0x10	; 16
      0000EA 7F                    2240 	.db #0x7f	; 127
      0000EB 3E                    2241 	.db #0x3e	; 62
      0000EC 41                    2242 	.db #0x41	; 65	'A'
      0000ED 41                    2243 	.db #0x41	; 65	'A'
      0000EE 41                    2244 	.db #0x41	; 65	'A'
      0000EF 3E                    2245 	.db #0x3e	; 62
      0000F0 7F                    2246 	.db #0x7f	; 127
      0000F1 09                    2247 	.db #0x09	; 9
      0000F2 09                    2248 	.db #0x09	; 9
      0000F3 09                    2249 	.db #0x09	; 9
      0000F4 06                    2250 	.db #0x06	; 6
      0000F5 3E                    2251 	.db #0x3e	; 62
      0000F6 41                    2252 	.db #0x41	; 65	'A'
      0000F7 51                    2253 	.db #0x51	; 81	'Q'
      0000F8 21                    2254 	.db #0x21	; 33
      0000F9 5E                    2255 	.db #0x5e	; 94
      0000FA 7F                    2256 	.db #0x7f	; 127
      0000FB 09                    2257 	.db #0x09	; 9
      0000FC 19                    2258 	.db #0x19	; 25
      0000FD 29                    2259 	.db #0x29	; 41
      0000FE 46                    2260 	.db #0x46	; 70	'F'
      0000FF 46                    2261 	.db #0x46	; 70	'F'
      000100 49                    2262 	.db #0x49	; 73	'I'
      000101 49                    2263 	.db #0x49	; 73	'I'
      000102 49                    2264 	.db #0x49	; 73	'I'
      000103 31                    2265 	.db #0x31	; 49	'1'
      000104 01                    2266 	.db #0x01	; 1
      000105 01                    2267 	.db #0x01	; 1
      000106 7F                    2268 	.db #0x7f	; 127
      000107 01                    2269 	.db #0x01	; 1
      000108 01                    2270 	.db #0x01	; 1
      000109 3F                    2271 	.db #0x3f	; 63
      00010A 40                    2272 	.db #0x40	; 64
      00010B 40                    2273 	.db #0x40	; 64
      00010C 40                    2274 	.db #0x40	; 64
      00010D 3F                    2275 	.db #0x3f	; 63
      00010E 1F                    2276 	.db #0x1f	; 31
      00010F 20                    2277 	.db #0x20	; 32
      000110 40                    2278 	.db #0x40	; 64
      000111 20                    2279 	.db #0x20	; 32
      000112 1F                    2280 	.db #0x1f	; 31
      000113 3F                    2281 	.db #0x3f	; 63
      000114 40                    2282 	.db #0x40	; 64
      000115 38                    2283 	.db #0x38	; 56	'8'
      000116 40                    2284 	.db #0x40	; 64
      000117 3F                    2285 	.db #0x3f	; 63
      000118 63                    2286 	.db #0x63	; 99	'c'
      000119 14                    2287 	.db #0x14	; 20
      00011A 08                    2288 	.db #0x08	; 8
      00011B 14                    2289 	.db #0x14	; 20
      00011C 63                    2290 	.db #0x63	; 99	'c'
      00011D 07                    2291 	.db #0x07	; 7
      00011E 08                    2292 	.db #0x08	; 8
      00011F 70                    2293 	.db #0x70	; 112	'p'
      000120 08                    2294 	.db #0x08	; 8
      000121 07                    2295 	.db #0x07	; 7
      000122 61                    2296 	.db #0x61	; 97	'a'
      000123 51                    2297 	.db #0x51	; 81	'Q'
      000124 49                    2298 	.db #0x49	; 73	'I'
      000125 45                    2299 	.db #0x45	; 69	'E'
      000126 43                    2300 	.db #0x43	; 67	'C'
      000127 00                    2301 	.db #0x00	; 0
      000128 7F                    2302 	.db #0x7f	; 127
      000129 41                    2303 	.db #0x41	; 65	'A'
      00012A 41                    2304 	.db #0x41	; 65	'A'
      00012B 00                    2305 	.db #0x00	; 0
      00012C 02                    2306 	.db #0x02	; 2
      00012D 04                    2307 	.db #0x04	; 4
      00012E 08                    2308 	.db #0x08	; 8
      00012F 10                    2309 	.db #0x10	; 16
      000130 20                    2310 	.db #0x20	; 32
      000131 00                    2311 	.db #0x00	; 0
      000132 41                    2312 	.db #0x41	; 65	'A'
      000133 41                    2313 	.db #0x41	; 65	'A'
      000134 7F                    2314 	.db #0x7f	; 127
      000135 00                    2315 	.db #0x00	; 0
      000136 04                    2316 	.db #0x04	; 4
      000137 02                    2317 	.db #0x02	; 2
      000138 01                    2318 	.db #0x01	; 1
      000139 02                    2319 	.db #0x02	; 2
      00013A 04                    2320 	.db #0x04	; 4
      00013B 40                    2321 	.db #0x40	; 64
      00013C 40                    2322 	.db #0x40	; 64
      00013D 40                    2323 	.db #0x40	; 64
      00013E 40                    2324 	.db #0x40	; 64
      00013F 40                    2325 	.db #0x40	; 64
      000140 00                    2326 	.db #0x00	; 0
      000141 01                    2327 	.db #0x01	; 1
      000142 02                    2328 	.db #0x02	; 2
      000143 04                    2329 	.db #0x04	; 4
      000144 00                    2330 	.db #0x00	; 0
      000145 20                    2331 	.db #0x20	; 32
      000146 54                    2332 	.db #0x54	; 84	'T'
      000147 54                    2333 	.db #0x54	; 84	'T'
      000148 54                    2334 	.db #0x54	; 84	'T'
      000149 78                    2335 	.db #0x78	; 120	'x'
      00014A 7F                    2336 	.db #0x7f	; 127
      00014B 48                    2337 	.db #0x48	; 72	'H'
      00014C 44                    2338 	.db #0x44	; 68	'D'
      00014D 44                    2339 	.db #0x44	; 68	'D'
      00014E 38                    2340 	.db #0x38	; 56	'8'
      00014F 38                    2341 	.db #0x38	; 56	'8'
      000150 44                    2342 	.db #0x44	; 68	'D'
      000151 44                    2343 	.db #0x44	; 68	'D'
      000152 44                    2344 	.db #0x44	; 68	'D'
      000153 20                    2345 	.db #0x20	; 32
      000154 38                    2346 	.db #0x38	; 56	'8'
      000155 44                    2347 	.db #0x44	; 68	'D'
      000156 44                    2348 	.db #0x44	; 68	'D'
      000157 48                    2349 	.db #0x48	; 72	'H'
      000158 7F                    2350 	.db #0x7f	; 127
      000159 38                    2351 	.db #0x38	; 56	'8'
      00015A 54                    2352 	.db #0x54	; 84	'T'
      00015B 54                    2353 	.db #0x54	; 84	'T'
      00015C 54                    2354 	.db #0x54	; 84	'T'
      00015D 18                    2355 	.db #0x18	; 24
      00015E 08                    2356 	.db #0x08	; 8
      00015F 7E                    2357 	.db #0x7e	; 126
      000160 09                    2358 	.db #0x09	; 9
      000161 01                    2359 	.db #0x01	; 1
      000162 02                    2360 	.db #0x02	; 2
      000163 0C                    2361 	.db #0x0c	; 12
      000164 52                    2362 	.db #0x52	; 82	'R'
      000165 52                    2363 	.db #0x52	; 82	'R'
      000166 52                    2364 	.db #0x52	; 82	'R'
      000167 3E                    2365 	.db #0x3e	; 62
      000168 7F                    2366 	.db #0x7f	; 127
      000169 08                    2367 	.db #0x08	; 8
      00016A 04                    2368 	.db #0x04	; 4
      00016B 04                    2369 	.db #0x04	; 4
      00016C 78                    2370 	.db #0x78	; 120	'x'
      00016D 00                    2371 	.db #0x00	; 0
      00016E 44                    2372 	.db #0x44	; 68	'D'
      00016F 7D                    2373 	.db #0x7d	; 125
      000170 40                    2374 	.db #0x40	; 64
      000171 00                    2375 	.db #0x00	; 0
      000172 20                    2376 	.db #0x20	; 32
      000173 40                    2377 	.db #0x40	; 64
      000174 44                    2378 	.db #0x44	; 68	'D'
      000175 3D                    2379 	.db #0x3d	; 61
      000176 00                    2380 	.db #0x00	; 0
      000177 7F                    2381 	.db #0x7f	; 127
      000178 10                    2382 	.db #0x10	; 16
      000179 28                    2383 	.db #0x28	; 40
      00017A 44                    2384 	.db #0x44	; 68	'D'
      00017B 00                    2385 	.db #0x00	; 0
      00017C 00                    2386 	.db #0x00	; 0
      00017D 41                    2387 	.db #0x41	; 65	'A'
      00017E 7F                    2388 	.db #0x7f	; 127
      00017F 40                    2389 	.db #0x40	; 64
      000180 00                    2390 	.db #0x00	; 0
      000181 7C                    2391 	.db #0x7c	; 124
      000182 04                    2392 	.db #0x04	; 4
      000183 18                    2393 	.db #0x18	; 24
      000184 04                    2394 	.db #0x04	; 4
      000185 78                    2395 	.db #0x78	; 120	'x'
      000186 7C                    2396 	.db #0x7c	; 124
      000187 08                    2397 	.db #0x08	; 8
      000188 04                    2398 	.db #0x04	; 4
      000189 04                    2399 	.db #0x04	; 4
      00018A 78                    2400 	.db #0x78	; 120	'x'
      00018B 38                    2401 	.db #0x38	; 56	'8'
      00018C 44                    2402 	.db #0x44	; 68	'D'
      00018D 44                    2403 	.db #0x44	; 68	'D'
      00018E 44                    2404 	.db #0x44	; 68	'D'
      00018F 38                    2405 	.db #0x38	; 56	'8'
      000190 7C                    2406 	.db #0x7c	; 124
      000191 14                    2407 	.db #0x14	; 20
      000192 14                    2408 	.db #0x14	; 20
      000193 14                    2409 	.db #0x14	; 20
      000194 08                    2410 	.db #0x08	; 8
      000195 08                    2411 	.db #0x08	; 8
      000196 14                    2412 	.db #0x14	; 20
      000197 14                    2413 	.db #0x14	; 20
      000198 14                    2414 	.db #0x14	; 20
      000199 7C                    2415 	.db #0x7c	; 124
      00019A 7C                    2416 	.db #0x7c	; 124
      00019B 08                    2417 	.db #0x08	; 8
      00019C 04                    2418 	.db #0x04	; 4
      00019D 04                    2419 	.db #0x04	; 4
      00019E 08                    2420 	.db #0x08	; 8
      00019F 48                    2421 	.db #0x48	; 72	'H'
      0001A0 54                    2422 	.db #0x54	; 84	'T'
      0001A1 54                    2423 	.db #0x54	; 84	'T'
      0001A2 54                    2424 	.db #0x54	; 84	'T'
      0001A3 20                    2425 	.db #0x20	; 32
      0001A4 04                    2426 	.db #0x04	; 4
      0001A5 3F                    2427 	.db #0x3f	; 63
      0001A6 44                    2428 	.db #0x44	; 68	'D'
      0001A7 40                    2429 	.db #0x40	; 64
      0001A8 20                    2430 	.db #0x20	; 32
      0001A9 3C                    2431 	.db #0x3c	; 60
      0001AA 40                    2432 	.db #0x40	; 64
      0001AB 40                    2433 	.db #0x40	; 64
      0001AC 20                    2434 	.db #0x20	; 32
      0001AD 7C                    2435 	.db #0x7c	; 124
      0001AE 1C                    2436 	.db #0x1c	; 28
      0001AF 20                    2437 	.db #0x20	; 32
      0001B0 40                    2438 	.db #0x40	; 64
      0001B1 20                    2439 	.db #0x20	; 32
      0001B2 1C                    2440 	.db #0x1c	; 28
      0001B3 3C                    2441 	.db #0x3c	; 60
      0001B4 40                    2442 	.db #0x40	; 64
      0001B5 30                    2443 	.db #0x30	; 48	'0'
      0001B6 40                    2444 	.db #0x40	; 64
      0001B7 3C                    2445 	.db #0x3c	; 60
      0001B8 44                    2446 	.db #0x44	; 68	'D'
      0001B9 28                    2447 	.db #0x28	; 40
      0001BA 10                    2448 	.db #0x10	; 16
      0001BB 28                    2449 	.db #0x28	; 40
      0001BC 44                    2450 	.db #0x44	; 68	'D'
      0001BD 0C                    2451 	.db #0x0c	; 12
      0001BE 50                    2452 	.db #0x50	; 80	'P'
      0001BF 50                    2453 	.db #0x50	; 80	'P'
      0001C0 50                    2454 	.db #0x50	; 80	'P'
      0001C1 3C                    2455 	.db #0x3c	; 60
      0001C2 44                    2456 	.db #0x44	; 68	'D'
      0001C3 64                    2457 	.db #0x64	; 100	'd'
      0001C4 54                    2458 	.db #0x54	; 84	'T'
      0001C5 4C                    2459 	.db #0x4c	; 76	'L'
      0001C6 44                    2460 	.db #0x44	; 68	'D'
      0001C7 00                    2461 	.db #0x00	; 0
      0001C8 08                    2462 	.db #0x08	; 8
      0001C9 36                    2463 	.db #0x36	; 54	'6'
      0001CA 41                    2464 	.db #0x41	; 65	'A'
      0001CB 00                    2465 	.db #0x00	; 0
      0001CC 00                    2466 	.db #0x00	; 0
      0001CD 00                    2467 	.db #0x00	; 0
      0001CE 7F                    2468 	.db #0x7f	; 127
      0001CF 00                    2469 	.db #0x00	; 0
      0001D0 00                    2470 	.db #0x00	; 0
      0001D1 00                    2471 	.db #0x00	; 0
      0001D2 41                    2472 	.db #0x41	; 65	'A'
      0001D3 36                    2473 	.db #0x36	; 54	'6'
      0001D4 08                    2474 	.db #0x08	; 8
      0001D5 00                    2475 	.db #0x00	; 0
      0001D6 10                    2476 	.db #0x10	; 16
      0001D7 08                    2477 	.db #0x08	; 8
      0001D8 08                    2478 	.db #0x08	; 8
      0001D9 10                    2479 	.db #0x10	; 16
      0001DA 08                    2480 	.db #0x08	; 8
      0001DB 00                    2481 	.db #0x00	; 0
      0001DC 00                    2482 	.db #0x00	; 0
      0001DD 00                    2483 	.db #0x00	; 0
      0001DE 00                    2484 	.db #0x00	; 0
      0001DF 00                    2485 	.db #0x00	; 0
                                   2486 	.area CONST   (CODE)
      0001E0                       2487 ___str_0:
      0001E0 52 75 6E 69 6E 67 20  2488 	.ascii "Runing Stepper Motor!"
             53 74 65 70 70 65 72
             20 4D 6F 74 6F 72 21
      0001F5 0A                    2489 	.db 0x0a
      0001F6 00                    2490 	.db 0x00
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area CONST   (CODE)
      0001F7                       2493 ___str_1:
      0001F7 64 69 73 74 61 6E 63  2494 	.ascii "distance control page not implemented!"
             65 20 63 6F 6E 74 72
             6F 6C 20 70 61 67 65
             20 6E 6F 74 20 69 6D
             70 6C 65 6D 65 6E 74
             65 64 21
      00021D 0A                    2495 	.db 0x0a
      00021E 00                    2496 	.db 0x00
                                   2497 	.area CSEG    (CODE)
                                   2498 	.area CONST   (CODE)
      00021F                       2499 ___str_2:
      00021F 72 65 61 63 68 65 64  2500 	.ascii "reached encoder control page not implemented!"
             20 65 6E 63 6F 64 65
             72 20 63 6F 6E 74 72
             6F 6C 20 70 61 67 65
             20 6E 6F 74 20 69 6D
             70 6C 65 6D 65 6E 74
             65 64 21
      00024C 0A                    2501 	.db 0x0a
      00024D 00                    2502 	.db 0x00
                                   2503 	.area CSEG    (CODE)
                                   2504 	.area XINIT   (CODE)
      000000                       2505 __xinit__current_page:
      000000 00                    2506 	.db #0x00	; 0
      000001                       2507 __xinit__application_process_func:
      000001r00s00                 2508 	.byte _application_process_welcome_page, (_application_process_welcome_page >> 8)
      000003r77s00                 2509 	.byte _application_process_menu_page, (_application_process_menu_page >> 8)
      000005r59s01                 2510 	.byte _application_process_step_control_page, (_application_process_step_control_page >> 8)
      000007r40s05                 2511 	.byte _application_process_distance_control_page, (_application_process_distance_control_page >> 8)
      000009r58s05                 2512 	.byte _application_process_encoder_control_page, (_application_process_encoder_control_page >> 8)
      00000Br62s03                 2513 	.byte _application_process_step_control_set_frequency, (_application_process_step_control_set_frequency >> 8)
      00000DrE5s03                 2514 	.byte _application_process_step_control_set_microstepping, (_application_process_step_control_set_microstepping >> 8)
      00000Fr4Ds04                 2515 	.byte _application_process_step_control_set_steps, (_application_process_step_control_set_steps >> 8)
      000011                       2516 __xinit__float_digit_pointer:
      000011 00                    2517 	.db #0x00	; 0
      000012                       2518 __xinit__float_digits:
      000012 00                    2519 	.db #0x00	; 0
      000013 00                    2520 	.db #0x00	; 0
      000014 00                    2521 	.db #0x00	; 0
      000015 00                    2522 	.db #0x00	; 0
      000016 00                    2523 	.db #0x00	; 0
      000017                       2524 __xinit__inputs:
      000017 00                    2525 	.db #0x00	; 0
      000018r00s00                 2526 	.byte _get_button1_status, (_get_button1_status >> 8)
      00001A 00                    2527 	.db #0x00	; 0
      00001Br00s00                 2528 	.byte _get_button2_status, (_get_button2_status >> 8)
      00001D 00                    2529 	.db #0x00	; 0
      00001Er00s00                 2530 	.byte _get_encoder_button_status, (_get_encoder_button_status >> 8)
      000020 00                    2531 	.db #0x00	; 0
      000021r00s00                 2532 	.byte _get_switch_status, (_get_switch_status >> 8)
      000023 00 00                 2533 	.byte #0x00, #0x00	;  0
      000025r00s00                 2534 	.byte _get_encoder_count, (_get_encoder_count >> 8)
      000027                       2535 __xinit__stepper_movement:
      000027 01                    2536 	.db #0x01	; 1
      000028 00                    2537 	.db #0x00	; 0
      000029 00                    2538 	.db #0x00	; 0
      00002A 32 00 00 00           2539 	.byte #0x32, #0x00, #0x00, #0x00	; 50
      00002E 80 0C 00 00           2540 	.byte #0x80, #0x0c, #0x00, #0x00	; 3200
                                   2541 	.area CABS    (ABS,CODE)
